'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.transformOrigin = transformOrigin;
exports.createTranslateXScaleX = createTranslateXScaleX;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var noop = exports.noop = function noop() {};

var getType = exports.getType = function getType(object) {
  return Object.prototype.toString.call(object).slice(8, -1);
};

var isEmpty = exports.isEmpty = function isEmpty(value) {
  var type = getType(value);

  switch (type) {
    case 'Array':
      return !value.length;
    case 'Object':
      return !Object.keys(value).length;
    default:
      return !value;
  }
};

var isEqual = exports.isEqual = function isEqual() {
  var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var keys = Object.keys(object);
  var otherKeys = Object.keys(other);
  if (size(keys) !== size(otherKeys)) return false;

  return keys.every(function (key) {
    var value = object[key];
    var otherValue = other[key];
    return value === otherValue;
  });
};

var baseGetSet = function baseGetSet(path) {
  var type = getType(path);
  switch (type) {
    case 'Array':
      return path;
    case 'String':
    case 'Number':
      return ('' + path).split('.');
    default:
      return [];
  }
};

var get = exports.get = function get(object, path, defaultValue) {
  var pathArray = baseGetSet(path);

  return pathArray.reduce(function (obj, key) {
    return obj && obj[key] ? obj[key] : null;
  }, object) || defaultValue;
};

var set = exports.set = function set(object, path, value) {
  var pathArray = baseGetSet(path);
  var len = pathArray.length;

  return pathArray.reduce(function (obj, key, ind) {
    if (obj && ind === len - 1) {
      obj[key] = value;
    }

    return obj ? obj[key] : null;
  }, object);
};

var keys = exports.keys = function keys(value) {
  var type = getType(value);

  switch (type) {
    case 'Array':
    case 'Object':
      return Object.keys(value);
    default:
      return [];
  }
};

var size = exports.size = function size(value) {
  if (value) {
    var type = getType(value);
    switch (type) {
      case 'Array':
        return value.length;
      case 'Object':
        return keys(value).length;
      default:
        return value.length || 0;
    }
  }
  return 0;
};

var mergeWith = exports.mergeWith = function mergeWith(originObject, mergeObject, handle) {
  var originKeys = keys(originObject);
  var mergeKeys = keys(mergeObject);
  var reObject = {};
  originKeys.forEach(function (key) {
    var mergeIndex = mergeKeys.indexOf(key);
    if (mergeIndex > -1) {
      reObject[key] = handle(originObject[key], mergeObject[key], key, originObject, mergeObject);
      mergeKeys.splice(mergeIndex, 1);
    } else {
      reObject[key] = originObject[key];
    }
  });
  mergeKeys.forEach(function (key) {
    reObject[key] = mergeObject[key];
  });

  return reObject;
};

var mergeStyle = exports.mergeStyle = function mergeStyle() {
  for (var _len = arguments.length, styles = Array(_len), _key = 0; _key < _len; _key++) {
    styles[_key] = arguments[_key];
  }

  return styles.reduce(function (p, c) {
    return _extends({}, p || {}, c || {});
  }, {});
};

var getMergeObject = exports.getMergeObject = function getMergeObject(originObject, mergeObject) {
  return mergeWith(originObject, mergeObject, function (originValue, mergeValue) {
    var type = getType(originValue);

    switch (type) {
      case 'Array':
        return [].concat(_toConsumableArray(originValue), _toConsumableArray(mergeValue));
      case 'Function':
        return function () {
          originValue.apply(undefined, arguments);mergeValue.apply(undefined, arguments);
        };
      case 'Object':
        return _extends({}, originValue, mergeValue);
      default:
        return mergeValue;
    }
  });
};

// const regMap = {
//   '([a-z]*)Horizontal': ['Left', 'Right'],
//   '([a-z]*)Vertical': ['Top', 'Bottom'],
// }
var keyMap = {
  paddingHorizontal: ['paddingLeft', 'paddingRight'],
  marginHorizontal: ['marginLeft', 'marginRight'],
  paddingVertical: ['paddingTop', 'paddingBottom'],
  marginVertical: ['marginTop', 'marginBottom']
};
var getReplaceStyle = function getReplaceStyle() {
  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var key = arguments[1];

  var reKeys = keyMap[key] || key;
  var type = getType(reKeys);
  var value = style[key];
  if (type === 'Array') {
    return reKeys.reduce(function (p, c) {
      return _extends({}, p, _defineProperty({}, c, value));
    }, {});
  }
  return _defineProperty({}, key, value);
};

var handleStyle = exports.handleStyle = function handleStyle() {
  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var styleKeys = keys(style);
  return styleKeys.reduce(function (reStyle, k) {
    var replaceStyle = getReplaceStyle(style, k);
    return _extends({}, reStyle, replaceStyle);
  }, {});
};

var MatrixMath = exports.MatrixMath = {
  createIdentityMatrix: function createIdentityMatrix() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  },
  reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
    matrixCommand[12] = x;
    matrixCommand[13] = y;
    matrixCommand[14] = z;
  },
  multiplyInto: function multiplyInto(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];

    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  }
};

function transformOrigin(matrix, origin) {
  var x = origin.x,
      y = origin.y,
      z = origin.z;


  var translate = MatrixMath.createIdentityMatrix();
  MatrixMath.reuseTranslate3dCommand(translate, x, y, z);
  MatrixMath.multiplyInto(matrix, translate, matrix);

  var untranslate = MatrixMath.createIdentityMatrix();
  MatrixMath.reuseTranslate3dCommand(untranslate, -x, -y, -z);
  MatrixMath.multiplyInto(matrix, matrix, untranslate);
}

function createTranslateXScaleX(scaleXFactor, x) {
  // prettier-ignore
  return [scaleXFactor, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, 0, 0, 1];
}