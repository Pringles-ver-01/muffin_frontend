'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Style = exports.Text = exports.View = exports.Easing = exports.Animated = exports.AnimatedView = exports.ScrollView = exports.Button = exports.matrixKey = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('animated/lib/targets/react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Easing = require('animated/lib/Easing');

var _Easing2 = _interopRequireDefault(_Easing);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultStyle = { display: 'flex', flexDirection: 'row', boxSizing: 'border-box' };
var textDefaultStyle = { whiteSpace: 'nowrap' };

var Button = function (_Component) {
  _inherits(Button, _Component);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  _createClass(Button, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          onPress = _props.onPress,
          onLayout = _props.onLayout,
          style = _props.style,
          otherProps = _objectWithoutProperties(_props, ['onPress', 'onLayout', 'style']);

      var extraProps = {};
      if (onPress) {
        extraProps.onClick = onPress;
      }
      if (onLayout) {
        extraProps.ref = ref(onLayout);
      }

      return _react2.default.createElement('div', _extends({
        style: (0, _utils.handleStyle)((0, _utils.mergeStyle)(defaultStyle, style))
      }, extraProps, otherProps));
    }
  }]);

  return Button;
}(_react.Component);

var AnimatedView = _reactDom2.default.div;

var ref = function ref(onLayout) {
  return function (dom) {
    if (dom && onLayout) {
      var offsetLeft = dom.offsetLeft,
          offsetTop = dom.offsetTop,
          offsetWidth = dom.offsetWidth,
          offsetHeight = dom.offsetHeight;


      onLayout({
        nativeEvent: {
          layout: {
            height: offsetHeight,
            width: offsetWidth,
            x: offsetLeft,
            y: offsetTop
          }
        }
      });
    }
  };
};

var View = function View(props) {
  var onLayout = props.onLayout,
      style = props.style,
      otherProps = _objectWithoutProperties(props, ['onLayout', 'style']);

  var extraProps = {};
  if (onLayout) {
    extraProps.ref = ref(onLayout);
  }

  return _react2.default.createElement('div', _extends({
    style: (0, _utils.handleStyle)((0, _utils.mergeStyle)(defaultStyle, style))
  }, extraProps, otherProps));
};

var Text = function Text(props) {
  var onLayout = props.onLayout,
      style = props.style,
      otherProps = _objectWithoutProperties(props, ['onLayout', 'style']);

  var extraProps = {};
  if (onLayout) {
    extraProps.ref = ref(onLayout);
  }

  return _react2.default.createElement('span', _extends({
    style: (0, _utils.handleStyle)((0, _utils.mergeStyle)(defaultStyle, textDefaultStyle, style))
  }, extraProps, otherProps));
};

var ScrollView = function (_Component2) {
  _inherits(ScrollView, _Component2);

  function ScrollView(props) {
    _classCallCheck(this, ScrollView);

    var _this2 = _possibleConstructorReturn(this, (ScrollView.__proto__ || Object.getPrototypeOf(ScrollView)).call(this, props));

    _this2.setRef = function (dom) {
      if (dom) {
        _this2._scrollView = dom;
        var _this2$props = _this2.props,
            onRef = _this2$props.onRef,
            onContentSizeChange = _this2$props.onContentSizeChange;

        if (onRef) onRef(_this2);

        var width = dom.scrollWidth,
            height = dom.scrollHeight;

        onContentSizeChange && onContentSizeChange(width, height);
      }
    };

    _this2._onScroll = function (event) {
      var _event$currentTarget = event.currentTarget,
          x = _event$currentTarget.scrollLeft,
          y = _event$currentTarget.scrollTop,
          width = _event$currentTarget.scrollWidth,
          height = _event$currentTarget.scrollHeight,
          offsetWidth = _event$currentTarget.offsetWidth,
          offsetHeight = _event$currentTarget.offsetHeight;
      var onScroll = _this2.props.onScroll;


      var nativeEvent = {
        contentOffset: { x: x, y: y },
        contentSize: { width: width, height: height },
        layoutMeasurement: { width: offsetWidth, height: offsetHeight }
      };
      if (onScroll) onScroll({ nativeEvent: nativeEvent });
    };

    _this2.scrollTo = function (_ref) {
      var x = _ref.x,
          y = _ref.y,
          animated = _ref.animated;
      var vertical = _this2.props.vertical;

      var scrollKey = vertical ? 'scrollTop' : 'scrollLeft';
      var value = vertical ? y : x;

      _this2._scrollView[scrollKey] = Math.abs(value);
    };

    var pos = new _reactDom2.default.Value(0);
    _this2.state = {
      pos: pos
    };
    return _this2;
  }

  _createClass(ScrollView, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          style = _props2.style,
          children = _props2.children;


      return _react2.default.createElement(
        'div',
        {
          ref: this.setRef,
          style: (0, _utils.handleStyle)((0, _utils.mergeStyle)(defaultStyle, style)),
          onScroll: this._onScroll,
          className: 'tabBar_scrollView'
        },
        children
      );
    }
  }]);

  return ScrollView;
}(_react.Component);

var Style = {
  containerStyle: {
    display: 'flex'
  },
  scrollViewStyle: {
    flex: 1,
    display: 'flex',
    overflowX: 'hidden',
    overflowY: 'hidden',
    WebkitOverflowScrolling: 'touch'
  },
  underlineStyle: {},
  tabStyle: {
    display: 'flex'
    // flex: '0 0 auto',
  }
};

var matrixKey = 'matrix3d';

exports.matrixKey = matrixKey;
exports.Button = Button;
exports.ScrollView = ScrollView;
exports.AnimatedView = AnimatedView;
exports.Animated = _reactDom2.default;
exports.Easing = _Easing2.default;
exports.View = View;
exports.Text = Text;
exports.Style = Style;