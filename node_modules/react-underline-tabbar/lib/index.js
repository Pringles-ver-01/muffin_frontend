'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _react = require('react');

var _decorators = require('./decorators');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TabBar = (0, _decorators.TabBarHOC)(_class = function (_PureComponent) {
  _inherits(TabBar, _PureComponent);

  function TabBar() {
    _classCallCheck(this, TabBar);

    return _possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).apply(this, arguments));
  }

  _createClass(TabBar, [{
    key: '_getStyle',
    value: function _getStyle() {
      var vertical = this.props.vertical;

      var scrollViewflex = void 0;
      var tabStyle = {
        flex: undefined
      };
      var containerStyle = {};
      if (this.isScrollTabBar !== null) {
        if (this.isScrollTabBar) {
          scrollViewflex = undefined;
          tabStyle.flex = undefined;
        } else {
          scrollViewflex = 1;
          tabStyle = {};
        }
      } else {
        containerStyle = {
          opacity: 0
        };
      }
      var linePos = vertical ? 'right' : 'bottom';

      return {
        containerStyle: containerStyle,
        scrollViewStyle: {
          flex: scrollViewflex
        },
        underlineStyle: _defineProperty({}, linePos, 0),
        tabStyle: tabStyle
      };
    }
  }]);

  return TabBar;
}(_react.PureComponent)) || _class;

exports.default = TabBar;