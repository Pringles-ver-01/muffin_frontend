{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"Vertical\"] = 0] = \"Vertical\";\n  Direction[Direction[\"Horizontal\"] = 1] = \"Horizontal\";\n})(Direction || (Direction = {}));\n\nvar styles = {\n  main: {\n    overflow: 'hidden',\n    position: 'relative',\n    boxSizing: 'border-box'\n  },\n  container: {\n    position: 'absolute',\n    top: '0',\n    left: '0',\n    overflow: 'scroll',\n    boxSizing: 'border-box'\n  },\n  track: {\n    vertical: {\n      position: 'absolute',\n      top: '0',\n      right: '0'\n    },\n    verticalCustomize: {\n      width: '10px',\n      backgroundColor: '#FAFAFA',\n      borderLeft: '1px solid #E8E8E8',\n      transition: 'opacity 0.3s'\n    },\n    horizontal: {\n      position: 'absolute',\n      left: '0',\n      bottom: '0'\n    },\n    horizontalCustomize: {\n      height: '10px',\n      backgroundColor: '#FAFAFA',\n      borderTop: '1px solid #E8E8E8',\n      transition: 'opacity 0.3s'\n    }\n  },\n  handler: {\n    vertical: {\n      position: 'absolute'\n    },\n    verticalCustomize: {\n      width: '100%',\n      backgroundColor: '#C1C1C1',\n      borderRadius: '5px',\n      transition: 'opacity 0.3s'\n    },\n    horizontal: {\n      position: 'absolute'\n    },\n    horizontalCustomize: {\n      height: '100%',\n      backgroundColor: '#C1C1C1',\n      borderRadius: '5px',\n      transition: 'opacity 0.3s'\n    }\n  },\n  square: {\n    position: 'absolute',\n    width: '10px',\n    height: '10px',\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'white'\n  }\n};\n\nvar FreeScrollbar =\n/** @class */\nfunction (_super) {\n  __extends(FreeScrollbar, _super);\n\n  function FreeScrollbar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.el = null;\n    _this.offsetHeight = 0;\n    _this.offsetWidth = 0;\n    _this.lastScrollHeight = 0;\n    _this.lastScrollWidth = 0;\n    _this.activeHandler = null;\n    _this.lastMousePos = null;\n    _this.lastContainerScrollTop = 0;\n    _this.lastContainerScrollLeft = 0;\n    _this.handlerHider = null;\n\n    _this.throttle = function (func, timeout) {\n      if (!func) return null;\n      var canRun = true;\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        if (canRun) {\n          canRun = false;\n          func.apply(void 0, args);\n          setTimeout(function () {\n            canRun = true;\n          }, timeout);\n        }\n      };\n    };\n\n    _this.scrollbarScrollThrottle = _this.props.onScrollbarScrollTimeout > 0 ? _this.throttle(_this.props.onScrollbarScroll, _this.props.onScrollbarScrollTimeout) : _this.props.onScrollbarScroll;\n\n    _this.handleReadyStateChange = function () {\n      if (document.readyState === 'complete') {\n        _this.prepareScrollbar();\n\n        _this.prepareScrollbarStartPos();\n      }\n    };\n\n    _this.prepareScrollbar = function () {\n      _this.collectInfo();\n\n      _this.updateTrackVisibilities(); // Trigger auto hider.\n\n\n      _this.handlerContainerScroll();\n    };\n\n    _this.prepareScrollbarStartPos = function () {\n      var start = _this.props.start;\n\n      if (typeof start === 'string') {\n        if (start.includes('bottom')) {\n          _this.el.scrollTop = _this.el.scrollHeight;\n        }\n\n        if (start.includes('right')) {\n          _this.el.scrollLeft = _this.el.scrollWidth;\n        }\n      } else if (typeof start === 'object') {\n        _this.el.scrollTop = start.top;\n        _this.el.scrollLeft = start.left;\n      }\n    };\n\n    _this.collectInfo = function () {\n      _this.offsetWidth = _this.el.offsetWidth;\n      _this.offsetHeight = _this.el.offsetHeight;\n    };\n\n    _this.updateTrackVisibilities = function () {\n      var el = _this.el;\n      var scrollHeight = el.scrollHeight,\n          scrollWidth = el.scrollWidth;\n      if (scrollHeight === _this.lastScrollHeight && scrollWidth === _this.lastScrollWidth) return;\n\n      _this.setState({\n        showVeriticalTrack: scrollHeight > _this.offsetHeight,\n        showHorizontalTrack: scrollWidth > _this.offsetWidth\n      });\n\n      _this.lastScrollWidth = scrollWidth;\n      _this.lastScrollHeight = scrollHeight;\n    };\n\n    _this.resetHandlerHider = function () {\n      if (_this.props.autohide) {\n        clearTimeout(_this.handlerHider);\n\n        _this.setState({\n          hideHandler: false\n        });\n\n        _this.handlerHider = setTimeout(function () {\n          _this.setState({\n            hideHandler: true\n          });\n        }, _this.props.timeout);\n      }\n    };\n\n    _this.handlerContainerScroll = function () {\n      _this.resetHandlerHider();\n\n      var el = _this.el;\n      var top = el.scrollTop / (el.scrollHeight - _this.offsetHeight) * (1 - _this.offsetHeight / _this.lastScrollHeight) * 100;\n      var bottom = (1 - (el.scrollTop + _this.offsetHeight) / (el.scrollHeight - _this.offsetHeight) * (1 - _this.offsetHeight / _this.lastScrollHeight)) * 100;\n      if (bottom < 0) bottom = 0;\n      var left = el.scrollLeft / (el.scrollWidth - _this.offsetWidth) * (1 - _this.offsetWidth / _this.lastScrollWidth) * 100;\n      var right = (1 - (el.scrollLeft + _this.offsetWidth) / (el.scrollWidth - _this.offsetWidth) * (1 - _this.offsetWidth / _this.lastScrollWidth)) * 100;\n      if (right < 0) right = 0;\n      var pos = {\n        top: top,\n        bottom: bottom,\n        left: left,\n        right: right\n      };\n\n      _this.setState({\n        handlerPos: pos\n      });\n\n      if (_this.scrollbarScrollThrottle) {\n        _this.scrollbarScrollThrottle();\n      }\n    };\n\n    _this.handleHandlerMouseDown = function (e, d) {\n      _this.resetHandlerHider();\n\n      _this.lastContainerScrollTop = _this.el.scrollTop;\n      _this.lastContainerScrollLeft = _this.el.scrollLeft;\n      _this.activeHandler = d;\n      _this.lastMousePos = {\n        top: e.clientY,\n        left: e.clientX\n      };\n\n      _this.setState({\n        noselect: true\n      });\n    };\n\n    _this.handleHandlerMouseMove = function (event) {\n      if (_this.activeHandler === Direction.Vertical) {\n        var delY = event.clientY - _this.lastMousePos.top;\n        _this.el.scrollTop = _this.lastContainerScrollTop + delY / _this.offsetHeight * _this.lastScrollHeight;\n      }\n\n      if (_this.activeHandler === Direction.Horizontal) {\n        var delX = event.clientX - _this.lastMousePos.left;\n        _this.el.scrollLeft = _this.lastContainerScrollLeft + delX / _this.offsetWidth * _this.lastScrollWidth;\n      }\n    };\n\n    _this.handleHandlerMouseUp = function () {\n      _this.lastMousePos = null;\n      _this.activeHandler = null;\n\n      _this.setState({\n        noselect: false\n      });\n    };\n    /**\n     * Set the scrolling position manually.\n     */\n\n\n    _this.setPosition = function (pos) {\n      if (pos.top) {\n        _this.el.scrollTop = pos.top;\n      }\n\n      if (pos.left) {\n        _this.el.scrollLeft = pos.left;\n      }\n    };\n\n    _this.state = {\n      showVeriticalTrack: false,\n      showHorizontalTrack: false,\n      noselect: false,\n      handlerPos: {\n        // Vertical handler.\n        top: 0,\n        bottom: 0,\n        // Horizontal handler.\n        left: 0,\n        right: 0\n      },\n      hideHandler: props.autohide\n    };\n    return _this;\n  }\n\n  FreeScrollbar.prototype.componentDidMount = function () {\n    window.addEventListener('resize', this.prepareScrollbar);\n    document.addEventListener('mousemove', this.handleHandlerMouseMove);\n    document.addEventListener('mouseup', this.handleHandlerMouseUp);\n    document.addEventListener('readystatechange', this.handleReadyStateChange);\n    this.prepareScrollbar();\n  };\n\n  FreeScrollbar.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.prepareScrollbar);\n    document.removeEventListener('mousemove', this.handleHandlerMouseMove);\n    document.removeEventListener('mouseup', this.handleHandlerMouseUp);\n    document.removeEventListener('readystatechange', this.handleReadyStateChange);\n    clearTimeout(this.handlerHider);\n  };\n\n  FreeScrollbar.prototype.componentDidUpdate = function () {\n    this.updateTrackVisibilities();\n  };\n\n  FreeScrollbar.prototype.render = function () {\n    var _this = this; // Dynamic styles\n\n\n    var containerStyles = {\n      paddingRight: this.props.fixed ? 0 : this.state.showHorizontalTrack ? this.props.tracksize : 0,\n      paddingBottom: this.props.fixed ? 0 : this.state.showVeriticalTrack ? this.props.tracksize : 0,\n      right: \"-\" + this.props.browserOffset,\n      bottom: \"-\" + this.props.browserOffset\n    };\n\n    if (this.state.noselect) {\n      containerStyles.userSelect = 'none';\n      containerStyles.MozUserSelect = 'none';\n      containerStyles.WebkitUserSelect = 'none';\n      containerStyles.msUserSelect = 'none';\n    }\n\n    var verticalTrackStyles = {\n      bottom: this.state.showHorizontalTrack ? this.props.tracksize : '0',\n      opacity: this.state.hideHandler ? 0 : 1\n    };\n    var horizontalTrackStyles = {\n      right: this.state.showVeriticalTrack ? this.props.tracksize : '0',\n      opacity: this.state.hideHandler ? 0 : 1\n    };\n    var verticalHandlerStyles = {\n      top: this.state.handlerPos.top + '%',\n      bottom: this.state.handlerPos.bottom + '%',\n      opacity: this.state.hideHandler ? 0 : 1\n    };\n    var horizontalHandlerStyles = {\n      left: this.state.handlerPos.left + '%',\n      right: this.state.handlerPos.right + '%',\n      opacity: this.state.hideHandler ? 0 : 1\n    };\n    return React.createElement(\"div\", {\n      className: \"FreeScrollbar \" + this.props.className,\n      style: __assign({}, this.props.style, styles.main)\n    }, React.createElement(\"div\", {\n      className: \"FreeScrollbar-container\",\n      style: __assign({}, containerStyles, styles.container),\n      ref: function ref(container) {\n        return _this.el = container;\n      },\n      onScroll: this.handlerContainerScroll\n    }, this.props.children), this.state.showVeriticalTrack ? React.createElement(\"div\", {\n      className: \"FreeScrollbar-vertical-track \" + (this.props.className ? this.props.className + '-vertical-track' : ''),\n      style: this.props.className ? Object.assign(verticalTrackStyles, styles.track.vertical) : Object.assign(verticalTrackStyles, styles.track.vertical, styles.track.verticalCustomize)\n    }, React.createElement(\"div\", {\n      className: \"FreeScrollbar-vertical-handler \" + (this.props.className ? this.props.className + '-vertical-handler' : ''),\n      onMouseDown: function onMouseDown(event) {\n        _this.handleHandlerMouseDown(event, Direction.Vertical);\n      },\n      style: this.props.className ? Object.assign(verticalHandlerStyles, styles.handler.vertical) : Object.assign(verticalHandlerStyles, styles.handler.vertical, styles.handler.verticalCustomize)\n    })) : null, this.state.showHorizontalTrack ? React.createElement(\"div\", {\n      className: \"FreeScrollbar-horizontal-track \" + (this.props.className ? this.props.className + '-horizontal-track' : ''),\n      style: this.props.className ? Object.assign(horizontalTrackStyles, styles.track.horizontal) : Object.assign(horizontalTrackStyles, styles.track.horizontal, styles.track.horizontalCustomize)\n    }, React.createElement(\"div\", {\n      className: \"FreeScrollbar-horizontal-handler \" + (this.props.className ? this.props.className + '-horizontal-handler' : ''),\n      onMouseDown: function onMouseDown(event) {\n        _this.handleHandlerMouseDown(event, Direction.Horizontal);\n      },\n      style: this.props.className ? Object.assign(horizontalHandlerStyles, styles.handler.horizontal) : Object.assign(horizontalHandlerStyles, styles.handler.horizontal, styles.handler.horizontalCustomize)\n    })) : null, this.state.showHorizontalTrack && this.state.showVeriticalTrack && !this.props.fixed ? React.createElement(\"div\", {\n      className: \"FreeScrollbar-square \" + (this.props.className ? this.props.className + '-square' : ''),\n      style: styles.square\n    }) : null);\n  };\n\n  FreeScrollbar.displayName = 'FreeScrollbar';\n  FreeScrollbar.defaultProps = {\n    className: '',\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    fixed: false,\n    autohide: false,\n    timeout: 2000,\n    tracksize: '10px',\n    start: '',\n    browserOffset: '17px',\n    onScrollbarScroll: null,\n    onScrollbarScrollTimeout: 300\n  };\n  return FreeScrollbar;\n}(React.PureComponent);\n\nexports.default = FreeScrollbar;","map":null,"metadata":{},"sourceType":"script"}