{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\src\\\\components\\\\independent\\\\webRTCRoom\\\\VideoItem.jsx\";\n\n/**\n * 담당자:조윤영 Edit By.한예지\n * [OUTLINE]\n * VideoItem파일은 화상회의 비디오를 표시하는 비디오 컴포넌트이다.\n * <p>\n * [METHOD]\n * getScreenId(error, sourceId, screen_constraints): 화면 공유 함수\n * disableInputButtons(): 상황에 맞춰 버튼들을 비활성화하는 함수\n * openRoom(): 신규 화상회의 방 개설하는 함수\n * joinRoom(): 기존 개설된 화상회의 방을 들어가는 함수\n * openOrJoinRoom(): 신규 화상회의방을 개설하고 들어가는 함수\n *\n * <p>\n * [LIBRARY]\n * 1. io: socket에 연결하기 위한 라이브러리\n */\nimport React, { Component } from \"react\";\nimport html2canvas from \"html2canvas\";\nimport axios from \"axios\";\nimport * as service from \"./getHTMLMediaElement\";\nimport EmotionStatusBar from \"./EmotionStatusBar\";\nimport loading from \"../../../assets/conference/emotion_loading.gif\";\nimport { VideoFrame, VideosContainer } from \"./webrtc.style\";\nvar connection = new window.RTCMultiConnection();\nconnection.autoCloseEntireSession = true; //개설자가 방을 나가면 방을 닫는 설정\n\nconnection.socketURL = \"https://rtcmulticonnection.herokuapp.com:443/\"; //socket.io 신호 서버 URL을 설정\n\nexport var VideoItem = /*#__PURE__*/function (_Component) {\n  _inherits(VideoItem, _Component);\n\n  //FIXME:state값 추가함\n  function VideoItem(props) {\n    var _this;\n\n    _classCallCheck(this, VideoItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VideoItem).call(this, props));\n    _this.state = {\n      roomToken: \"\",\n      dummy: [],\n      isShowEmotionStart: false,\n      isEmotionHearing: false,\n      emotion: \"\",\n      isWaiting: false\n    };\n    return _this;\n  }\n  /*script가져오는 함수 */\n\n\n  _createClass(VideoItem, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var script = document.createElement(\"script\");\n      script.src = \"https://cdn.webrtc-experiment.com/RTCMultiConnection.js\";\n      script.src = \"https://cdn.webrtc-experiment.com/conversation.js\";\n      script.src = \"https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js\";\n      script.src = \"https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js\";\n      script.src = \"https://rtcmulticonnection.herokuapp.com/node_modules/webrtc-adapter/out/adapter.js\";\n      script.src = \"./getHTMLMediaElement.jsx\";\n      script.src = \"https://cdn.WebRTC-Experiment.com/getScreenId.js\";\n      script.src = \"https://webrtc.github.io/adapter/adapter-latest.js\";\n      script.async = true;\n      document.body.appendChild(script);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      /*신규 화상회의방을 개설하고 들어가는 함수 */\n      connection.openOrJoin(document.getElementById(\"testRoomId\", function (isRoomExist, roomid, error) {\n        if (error) {\n          // disableInputButtons(true);\n          alert(error);\n        } else if (connection.isInitiator === true) {// showRoomURL(roomid);\n        }\n      })); // this.props 는 아직 바뀌지 않은 상태\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      (function () {\n        var params = {},\n            r = /([^&=]+)=?([^&]*)/g;\n\n        function d(s) {\n          return decodeURIComponent(s.replace(/\\+/g, \" \"));\n        }\n\n        var match,\n            search = window.location.search;\n\n        while (match = r.exec(search.substring(1))) {\n          params[d(match[1])] = d(match[2]);\n        }\n\n        window.params = params;\n      })();\n\n      connection.socketMessageEvent = \"video-conference-demo\";\n      connection.session = {\n        audio: true,\n        video: true\n      };\n      connection.sdpConstraints.mandatory = {\n        OfferToReceiveAudio: true,\n        OfferToReceiveVideo: true\n      };\n      var videoCpy;\n\n      connection.onstream = function (event) {\n        //connection1\n        // event.mediaContainer.style.width=\"\"\n        connection.videosContainer = document.getElementById(\"videos-container\"); //1개 이상의 비디오들을 담을 div공간을 id값으로 가져온다.\n\n        var video = document.createElement(\"video\"); //비디오 컴포넌트를 생성한다.\n\n        video.id = event.streamid; //각 비디오 화면에 각 스트림의 고유 식별자를 붙인다.\n\n        video.style.width = \"100%\";\n        video.style.height = \"100%\";\n        video.style.border = \"solid 1px var(--greenish-teal)\";\n        event.mediaElement.removeAttribute(\"src\");\n        event.mediaElement.removeAttribute(\"srcObject\");\n        event.mediaElement.muted = true;\n        event.mediaElement.volume = 0; //FIXME:\n\n        var existing = document.getElementById(event.streamid);\n\n        if (existing && existing.parentNode) {\n          existing.parentNode.removeChild(existing);\n        }\n\n        try {\n          video.setAttributeNode(document.createAttribute(\"autoplay\"));\n          video.setAttributeNode(document.createAttribute(\"playsinline\"));\n        } catch (e) {\n          video.setAttribute(\"autoplay\", true);\n          video.setAttribute(\"playsinline\", true);\n        }\n\n        if (event.type === \"local\") {\n          video.volume = 0;\n\n          try {\n            video.setAttributeNode(document.createAttribute(\"muted\"));\n          } catch (e) {\n            video.setAttribute(\"muted\", true);\n          }\n        }\n\n        video.srcObject = event.stream; //비디오에 stream을 연결한다.\n\n        connection.videosContainer.style.width = \"100%\";\n        var width = 400;\n        var mediaElement = service.getHTMLMediaElement(video, {\n          title: event.userid,\n          buttons: [\"mute-audio\", \"mute-video\"],\n          width: width,\n          showOnMouseEnter: false\n        });\n        connection.videosContainer.appendChild(mediaElement); //비디오를 div공간에 추가한다.\n        //TODO: get\n\n        setTimeout(function () {\n          mediaElement.media.play();\n        }, 5000);\n        mediaElement.id = event.streamid;\n\n        if (event.type === \"local\") {\n          connection.socket.on(\"disconnect\", function () {\n            if (!connection.getAllParticipants().length) {\n              window.location.reload();\n            }\n          });\n        }\n\n        localStorage.setItem(connection.socketMessageEvent, connection.sessionid);\n        videoCpy = video;\n      }; //connection2\n\n\n      connection.onstreamended = function (event) {\n        var mediaElement = document.getElementById(event.streamid);\n\n        if (mediaElement) {\n          mediaElement.parentNode.removeChild(mediaElement);\n        }\n      };\n\n      connection.onMediaError = function (e) {\n        if (e.message === \"Concurrent mic process limit.\") {\n          if (window.DetectRTC.audioInputDevices.length <= 1) {\n            alert(\"Please select external microphone. Check github issue number 483.\");\n            return;\n          }\n\n          var secondaryMic = window.DetectRTC.audioInputDevices[1].deviceId;\n          connection.mediaConstraints.audio = {\n            deviceId: secondaryMic\n          };\n          connection.join(connection.sessionid);\n        }\n      }; //TODO: 화면 공유 버튼 on/off state에 따라서 함수 실행시키기\n\n      /*화면 공유 함수*/\n\n\n      var getScreenId = function getScreenId(error, sourceId, screen_constraints) {\n        if (navigator.userAgent.indexOf(\"Edge\") !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\n          navigator.getDisplayMedia(screen_constraints).then(function (stream) {\n            document.querySelector(\"video\").srcObject = stream;\n          }, function (error) {\n            alert(\"Please make sure to use Edge 17 or higher.\");\n          });\n          return;\n        } //TODO: 화면 공유 버튼 on/off state에 따라서 함수 실행시키기\n        //chrome extension 설치 여부 detection\n        // const getChromeExtensionStatus = status => {\n        //   if (status === \"installed-enabled\") alert(\"installed\");\n        //   if (status === \"installed-disabled\") alert(\"installed but disabled\");\n        //   // etc.\n        // };\n\n\n        navigator.mediaDevices.getUserMedia(screen_constraints).then(function (stream) {\n          document.querySelector(\"video\").srcObject = stream; // share this \"MediaStream\" object using RTCPeerConnection API\n        }).catch(function (error) {\n          console.error(error);\n        });\n      };\n      /*******************************************/\n      //감정인식 로직: 화면의 비율 가로길이 기준으로 3/2이상은 펼쳐져 있어야 정상 작동하는 모습 볼 수 있음..\n\n      /*******************************************/\n\n\n      var playTran; //실시간 전송하기 위한 변수\n\n      var emotionResponse = \"\";\n      /* 비디오 캡처하는 함수*/\n\n      var capture = function capture() {\n        /*videos-container 캡쳐하기 전 비디오 위에 비디오 캡쳐 이미지 놓기*/\n        connection.showImage = document.getElementById(\"show-image\");\n        var canvas = document.createElement(\"canvas\");\n        var videos = document.querySelectorAll(\"video\");\n        var context = canvas.getContext(\"2d\");\n        /*비디오 각각을 반복문을 통해 별도로 캡쳐*/\n\n        for (var i = 0, len = videos.length; i < len; i++) {\n          var v = videos[i];\n          if (!v.id) continue;\n\n          try {\n            var ratio = v.videoWidth / v.videoHeight;\n            var w = v.videoWidth - 100;\n            var h = parseInt(w / ratio, 10);\n            canvas.setAttribute(\"width\", w);\n            canvas.setAttribute(\"height\", h);\n            context.fillRect(0, 0, w, h);\n            context.drawImage(v, 0, 0, w, h);\n            v.style.width = \"400px\";\n            v.style.height = \"300px\"; //-->이걸로 해결\n\n            v.style.backgroundImage = \"url(\".concat(canvas.toDataURL(\"image/png\"), \")\");\n            v.style.backgroundSize = \"cover\";\n          } catch (e) {\n            continue;\n          }\n        }\n        /*videos-container 캡쳐*/\n\n\n        html2canvas(document.getElementById(\"videos-container\")).then(function (canvas) {\n          axios.post(\"/emotion\", {\n            img: canvas.toDataURL(\"image/png\")\n          }).then(function (response) {\n            console.log(response.data);\n\n            if (response.data.data === false) {\n              emotionResponse = \"...\";\n            }\n\n            if (response.data.message == \"과반수 이상의 참여자가 긍정의 반응을 보였습니다\") {\n              emotionResponse = \"긍정\";\n            } else if (response.data.message == \"과반수 이상의 참여자가 부정의 반응을 보였습니다\") {\n              emotionResponse = \"부정\";\n            } else {\n              emotionResponse = \"무표정\";\n            }\n\n            console.log(response.data);\n          }).catch(function (e) {\n            console.log(e);\n          });\n        });\n\n        _this2.setState({\n          isWaiting: false\n        });\n\n        document.getElementById(\"emotionDiv\").innerHTML = emotionResponse;\n\n        _this2.setState({\n          emotion: emotionResponse\n        });\n\n        setTimeout(function () {\n          _this2.setState({\n            isWaiting: true,\n            emotion: \"none\"\n          });\n        }, 2000); // 시간. 2초 후 실행\n      };\n\n      var EmotionCheck = function EmotionCheck() {\n        //디자인 토글\n\n        /*5초마다 capture() 호출*/\n        //capture();\n        if (_this2.state.isEmotionHearing == false) {\n          document.getElementById(\"showEmotion\").innerHTML = \"감정 분석을 시작합니다.\";\n          document.getElementById(\"emotionBtn\").style.background = \"#28875f\";\n          document.getElementById(\"emotionDiv\").innerHTML = \"ON\";\n\n          _this2.setState({\n            isShowEmotionStart: true,\n            isEmotionHearing: true\n          });\n\n          setTimeout(function () {\n            document.getElementById(\"emotionBtn\").style.background = \"#2e373e\";\n\n            _this2.setState({\n              isShowEmotionStart: false,\n              isWaiting: true\n            });\n          }, 2000); // 시간. 2초 후 실행\n\n          playTran = setInterval(function () {\n            console.log(\"감정인식 중입니다.\");\n            capture();\n          }, 6000);\n        } else {\n          clearInterval(playTran);\n\n          _this2.setState({\n            isEmotionHearing: false,\n            isShowEmotionStart: true,\n            isWaiting: false\n          });\n\n          document.getElementById(\"emotionDiv\").innerHTML = \"OFF\";\n          document.getElementById(\"emotionBtn\").style.background = \"#ae4747\";\n          document.getElementById(\"showEmotion\").innerHTML = \"감정 분석을 종료합니다.\";\n          setTimeout(function () {\n            _this2.setState({\n              isShowEmotionStart: false\n            });\n          }, 2000); // 시간. 2초 후 실행\n        }\n      }; // const onStop = () => {\n      //   console.log(\"종료\");\n      // };\n\n\n      var showRoomURL = function showRoomURL(roomid) {\n        var roomHashURL = \"#\" + roomid;\n        var roomQueryStringURL = \"?roomid=\" + roomid;\n        var html = \"<h2>Unique URL for your room:</h2><br>\";\n        html += 'Hash URL: <a href=\"' + roomHashURL + '\" target=\"_blank\">' + roomHashURL + \"</a>\";\n        html += \"<br>\";\n        html += 'QueryString URL: <a href=\"' + roomQueryStringURL + '\" target=\"_blank\">' + roomQueryStringURL + \"</a>\";\n        var roomURLsDiv = document.getElementById(\"room-urls\");\n        roomURLsDiv.innerHTML = html;\n        roomURLsDiv.style.display = \"block\"; //FIXME:state값 추가함\n        // this.state.roomToken = roomQueryStringURL;\n        // this.state.roomKey = html;\n\n        _this2.state.roomToken = roomQueryStringURL;\n      };\n      /*roomid setting*/\n\n\n      var roomid = \"\";\n\n      if (localStorage.getItem(connection.socketMessageEvent)) {\n        roomid = localStorage.getItem(connection.socketMessageEvent);\n      } else {\n        roomid = connection.token();\n      }\n\n      var txtRoomId = document.getElementsByClassName(\"room-id\");\n      txtRoomId.value = roomid;\n\n      txtRoomId.onkeyup = txtRoomId.oninput = txtRoomId.onpaste = function () {\n        localStorage.setItem(connection.socketMessageEvent, document.getElementById(\"room-id\").value);\n      };\n\n      var hashString = window.location.hash.replace(\"#\", \"\");\n\n      if (hashString.length && hashString.indexOf(\"comment-\") === 0) {\n        hashString = \"\";\n      } //TODO: roomid를 직접 받아와야하는 부분\n\n\n      var roomid = localStorage.getItem(\"roomId\");\n\n      if (!roomid && hashString.length) {\n        roomid = hashString;\n      }\n\n      if (roomid && roomid.length) {\n        localStorage.setItem(connection.socketMessageEvent, roomid);\n        /*auto-join-room*/\n\n        (function reCheckRoomPresence() {\n          connection.checkPresence(roomid, function (isRoomExist) {\n            if (isRoomExist) {\n              connection.join(roomid);\n              return;\n            }\n\n            setTimeout(reCheckRoomPresence, 5000);\n          });\n        })();\n      }\n      /*detect 2G*/\n\n\n      if (navigator.connection && navigator.connection.type === \"cellular\" && navigator.connection.downlinkMax <= 0.115) {\n        alert(\"2G is not supported. Please use a better internet service.\");\n      }\n\n      return /*#__PURE__*/React.createElement(VideoFrame, {\n        id: \"video-home-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(VideosContainer, {\n        id: \"videos-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(EmotionStatusBar, {\n        status: this.state,\n        EmotionCheck: EmotionCheck,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return VideoItem;\n}(Component);\nexport default VideoItem;","map":{"version":3,"sources":["C:/Users/o_ov0/Downloads/Front-End-develop/Front-End-develop/client/src/components/independent/webRTCRoom/VideoItem.jsx"],"names":["React","Component","html2canvas","axios","service","EmotionStatusBar","loading","VideoFrame","VideosContainer","connection","window","RTCMultiConnection","autoCloseEntireSession","socketURL","VideoItem","props","state","roomToken","dummy","isShowEmotionStart","isEmotionHearing","emotion","isWaiting","script","document","createElement","src","async","body","appendChild","openOrJoin","getElementById","isRoomExist","roomid","error","alert","isInitiator","params","r","d","s","decodeURIComponent","replace","match","search","location","exec","substring","socketMessageEvent","session","audio","video","sdpConstraints","mandatory","OfferToReceiveAudio","OfferToReceiveVideo","videoCpy","onstream","event","videosContainer","id","streamid","style","width","height","border","mediaElement","removeAttribute","muted","volume","existing","parentNode","removeChild","setAttributeNode","createAttribute","e","setAttribute","type","srcObject","stream","getHTMLMediaElement","title","userid","buttons","showOnMouseEnter","setTimeout","media","play","socket","on","getAllParticipants","length","reload","localStorage","setItem","sessionid","onstreamended","onMediaError","message","DetectRTC","audioInputDevices","secondaryMic","deviceId","mediaConstraints","join","getScreenId","sourceId","screen_constraints","navigator","userAgent","indexOf","msSaveOrOpenBlob","msSaveBlob","getDisplayMedia","then","querySelector","mediaDevices","getUserMedia","catch","console","playTran","emotionResponse","capture","showImage","canvas","videos","querySelectorAll","context","getContext","i","len","v","ratio","videoWidth","videoHeight","w","h","parseInt","fillRect","drawImage","backgroundImage","toDataURL","backgroundSize","post","img","response","log","data","setState","innerHTML","EmotionCheck","background","setInterval","clearInterval","showRoomURL","roomHashURL","roomQueryStringURL","html","roomURLsDiv","display","getItem","token","txtRoomId","getElementsByClassName","value","onkeyup","oninput","onpaste","hashString","hash","reCheckRoomPresence","checkPresence","downlinkMax"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,OAAP,MAAoB,gDAApB;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,gBAA5C;AAEA,IAAIC,UAAU,GAAG,IAAIC,MAAM,CAACC,kBAAX,EAAjB;AACAF,UAAU,CAACG,sBAAX,GAAoC,IAApC,C,CAA0C;;AAC1CH,UAAU,CAACI,SAAX,GAAuB,+CAAvB,C,CAAwE;;AAExE,WAAaC,SAAb;AAAA;;AACE;AAEA,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,EADA;AAEXC,MAAAA,KAAK,EAAE,EAFI;AAGXC,MAAAA,kBAAkB,EAAE,KAHT;AAIXC,MAAAA,gBAAgB,EAAE,KAJP;AAKXC,MAAAA,OAAO,EAAE,EALE;AAMXC,MAAAA,SAAS,EAAE;AANA,KAAb;AAFiB;AAUlB;AAED;;;AAfF;AAAA;AAAA,yCAgBuB;AACnB,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AAEAF,MAAAA,MAAM,CAACG,GAAP,GAAa,yDAAb;AACAH,MAAAA,MAAM,CAACG,GAAP,GAAa,mDAAb;AAEAH,MAAAA,MAAM,CAACG,GAAP,GACE,yEADF;AAEAH,MAAAA,MAAM,CAACG,GAAP,GACE,iEADF;AAEAH,MAAAA,MAAM,CAACG,GAAP,GACE,qFADF;AAEAH,MAAAA,MAAM,CAACG,GAAP,GAAa,2BAAb;AAEAH,MAAAA,MAAM,CAACG,GAAP,GAAa,kDAAb;AACAH,MAAAA,MAAM,CAACG,GAAP,GAAa,oDAAb;AAEAH,MAAAA,MAAM,CAACI,KAAP,GAAe,IAAf;AAEAH,MAAAA,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,MAA1B;AACD;AApCH;AAAA;AAAA,wCAqCsB;AAClB;AACAd,MAAAA,UAAU,CAACqB,UAAX,CACEN,QAAQ,CAACO,cAAT,CAAwB,YAAxB,EAAsC,UACpCC,WADoC,EAEpCC,MAFoC,EAGpCC,KAHoC,EAIpC;AACA,YAAIA,KAAJ,EAAW;AACT;AACAC,UAAAA,KAAK,CAACD,KAAD,CAAL;AACD,SAHD,MAGO,IAAIzB,UAAU,CAAC2B,WAAX,KAA2B,IAA/B,EAAqC,CAC1C;AACD;AACF,OAXD,CADF,EAFkB,CAgBlB;AACD;AAtDH;AAAA;AAAA,6BAwDW;AAAA;;AACP,OAAC,YAAW;AACV,YAAIC,MAAM,GAAG,EAAb;AAAA,YACEC,CAAC,GAAG,oBADN;;AAEA,iBAASC,CAAT,CAAWC,CAAX,EAAc;AACZ,iBAAOC,kBAAkB,CAACD,CAAC,CAACE,OAAF,CAAU,KAAV,EAAiB,GAAjB,CAAD,CAAzB;AACD;;AACD,YAAIC,KAAJ;AAAA,YACEC,MAAM,GAAGlC,MAAM,CAACmC,QAAP,CAAgBD,MAD3B;;AAEA,eAAQD,KAAK,GAAGL,CAAC,CAACQ,IAAF,CAAOF,MAAM,CAACG,SAAP,CAAiB,CAAjB,CAAP,CAAhB;AACEV,UAAAA,MAAM,CAACE,CAAC,CAACI,KAAK,CAAC,CAAD,CAAN,CAAF,CAAN,GAAsBJ,CAAC,CAACI,KAAK,CAAC,CAAD,CAAN,CAAvB;AADF;;AAEAjC,QAAAA,MAAM,CAAC2B,MAAP,GAAgBA,MAAhB;AACD,OAXD;;AAaA5B,MAAAA,UAAU,CAACuC,kBAAX,GAAgC,uBAAhC;AAEAvC,MAAAA,UAAU,CAACwC,OAAX,GAAqB;AACnBC,QAAAA,KAAK,EAAE,IADY;AAEnBC,QAAAA,KAAK,EAAE;AAFY,OAArB;AAKA1C,MAAAA,UAAU,CAAC2C,cAAX,CAA0BC,SAA1B,GAAsC;AACpCC,QAAAA,mBAAmB,EAAE,IADe;AAEpCC,QAAAA,mBAAmB,EAAE;AAFe,OAAtC;AAKA,UAAIC,QAAJ;;AAEA/C,MAAAA,UAAU,CAACgD,QAAX,GAAsB,UAASC,KAAT,EAAgB;AACpC;AACA;AACAjD,QAAAA,UAAU,CAACkD,eAAX,GAA6BnC,QAAQ,CAACO,cAAT,CAAwB,kBAAxB,CAA7B,CAHoC,CAGsC;;AAC1E,YAAIoB,KAAK,GAAG3B,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAZ,CAJoC,CAIS;;AAC7C0B,QAAAA,KAAK,CAACS,EAAN,GAAWF,KAAK,CAACG,QAAjB,CALoC,CAKT;;AAC3BV,QAAAA,KAAK,CAACW,KAAN,CAAYC,KAAZ,GAAoB,MAApB;AACAZ,QAAAA,KAAK,CAACW,KAAN,CAAYE,MAAZ,GAAqB,MAArB;AAEAb,QAAAA,KAAK,CAACW,KAAN,CAAYG,MAAZ,GAAqB,gCAArB;AAEAP,QAAAA,KAAK,CAACQ,YAAN,CAAmBC,eAAnB,CAAmC,KAAnC;AACAT,QAAAA,KAAK,CAACQ,YAAN,CAAmBC,eAAnB,CAAmC,WAAnC;AACAT,QAAAA,KAAK,CAACQ,YAAN,CAAmBE,KAAnB,GAA2B,IAA3B;AACAV,QAAAA,KAAK,CAACQ,YAAN,CAAmBG,MAAnB,GAA4B,CAA5B,CAdoC,CAgBpC;;AACA,YAAIC,QAAQ,GAAG9C,QAAQ,CAACO,cAAT,CAAwB2B,KAAK,CAACG,QAA9B,CAAf;;AACA,YAAIS,QAAQ,IAAIA,QAAQ,CAACC,UAAzB,EAAqC;AACnCD,UAAAA,QAAQ,CAACC,UAAT,CAAoBC,WAApB,CAAgCF,QAAhC;AACD;;AAED,YAAI;AACFnB,UAAAA,KAAK,CAACsB,gBAAN,CAAuBjD,QAAQ,CAACkD,eAAT,CAAyB,UAAzB,CAAvB;AACAvB,UAAAA,KAAK,CAACsB,gBAAN,CAAuBjD,QAAQ,CAACkD,eAAT,CAAyB,aAAzB,CAAvB;AACD,SAHD,CAGE,OAAOC,CAAP,EAAU;AACVxB,UAAAA,KAAK,CAACyB,YAAN,CAAmB,UAAnB,EAA+B,IAA/B;AACAzB,UAAAA,KAAK,CAACyB,YAAN,CAAmB,aAAnB,EAAkC,IAAlC;AACD;;AAED,YAAIlB,KAAK,CAACmB,IAAN,KAAe,OAAnB,EAA4B;AAC1B1B,UAAAA,KAAK,CAACkB,MAAN,GAAe,CAAf;;AACA,cAAI;AACFlB,YAAAA,KAAK,CAACsB,gBAAN,CAAuBjD,QAAQ,CAACkD,eAAT,CAAyB,OAAzB,CAAvB;AACD,WAFD,CAEE,OAAOC,CAAP,EAAU;AACVxB,YAAAA,KAAK,CAACyB,YAAN,CAAmB,OAAnB,EAA4B,IAA5B;AACD;AACF;;AAEDzB,QAAAA,KAAK,CAAC2B,SAAN,GAAkBpB,KAAK,CAACqB,MAAxB,CAvCoC,CAuCJ;;AAEhCtE,QAAAA,UAAU,CAACkD,eAAX,CAA2BG,KAA3B,CAAiCC,KAAjC,GAAyC,MAAzC;AACA,YAAIA,KAAK,GAAG,GAAZ;AAEA,YAAIG,YAAY,GAAG9D,OAAO,CAAC4E,mBAAR,CAA4B7B,KAA5B,EAAmC;AACpD8B,UAAAA,KAAK,EAAEvB,KAAK,CAACwB,MADuC;AAEpDC,UAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,YAAf,CAF2C;AAGpDpB,UAAAA,KAAK,EAAEA,KAH6C;AAIpDqB,UAAAA,gBAAgB,EAAE;AAJkC,SAAnC,CAAnB;AAOA3E,QAAAA,UAAU,CAACkD,eAAX,CAA2B9B,WAA3B,CAAuCqC,YAAvC,EAnDoC,CAmDkB;AAEtD;;AACAmB,QAAAA,UAAU,CAAC,YAAW;AACpBnB,UAAAA,YAAY,CAACoB,KAAb,CAAmBC,IAAnB;AACD,SAFS,EAEP,IAFO,CAAV;AAGArB,QAAAA,YAAY,CAACN,EAAb,GAAkBF,KAAK,CAACG,QAAxB;;AAEA,YAAIH,KAAK,CAACmB,IAAN,KAAe,OAAnB,EAA4B;AAC1BpE,UAAAA,UAAU,CAAC+E,MAAX,CAAkBC,EAAlB,CAAqB,YAArB,EAAmC,YAAW;AAC5C,gBAAI,CAAChF,UAAU,CAACiF,kBAAX,GAAgCC,MAArC,EAA6C;AAC3CjF,cAAAA,MAAM,CAACmC,QAAP,CAAgB+C,MAAhB;AACD;AACF,WAJD;AAKD;;AACDC,QAAAA,YAAY,CAACC,OAAb,CAAqBrF,UAAU,CAACuC,kBAAhC,EAAoDvC,UAAU,CAACsF,SAA/D;AACAvC,QAAAA,QAAQ,GAAGL,KAAX;AACD,OApED,CA5BO,CAkGP;;;AACA1C,MAAAA,UAAU,CAACuF,aAAX,GAA2B,UAAStC,KAAT,EAAgB;AACzC,YAAIQ,YAAY,GAAG1C,QAAQ,CAACO,cAAT,CAAwB2B,KAAK,CAACG,QAA9B,CAAnB;;AACA,YAAIK,YAAJ,EAAkB;AAChBA,UAAAA,YAAY,CAACK,UAAb,CAAwBC,WAAxB,CAAoCN,YAApC;AACD;AACF,OALD;;AAMAzD,MAAAA,UAAU,CAACwF,YAAX,GAA0B,UAAStB,CAAT,EAAY;AACpC,YAAIA,CAAC,CAACuB,OAAF,KAAc,+BAAlB,EAAmD;AACjD,cAAIxF,MAAM,CAACyF,SAAP,CAAiBC,iBAAjB,CAAmCT,MAAnC,IAA6C,CAAjD,EAAoD;AAClDxD,YAAAA,KAAK,CACH,mEADG,CAAL;AAGA;AACD;;AACD,cAAIkE,YAAY,GAAG3F,MAAM,CAACyF,SAAP,CAAiBC,iBAAjB,CAAmC,CAAnC,EAAsCE,QAAzD;AACA7F,UAAAA,UAAU,CAAC8F,gBAAX,CAA4BrD,KAA5B,GAAoC;AAClCoD,YAAAA,QAAQ,EAAED;AADwB,WAApC;AAGA5F,UAAAA,UAAU,CAAC+F,IAAX,CAAgB/F,UAAU,CAACsF,SAA3B;AACD;AACF,OAdD,CAzGO,CAyHP;;AACA;;;AACA,UAAMU,WAAW,GAAG,SAAdA,WAAc,CAACvE,KAAD,EAAQwE,QAAR,EAAkBC,kBAAlB,EAAyC;AAC3D,YACEC,SAAS,CAACC,SAAV,CAAoBC,OAApB,CAA4B,MAA5B,MAAwC,CAAC,CAAzC,KACC,CAAC,CAACF,SAAS,CAACG,gBAAZ,IAAgC,CAAC,CAACH,SAAS,CAACI,UAD7C,CADF,EAGE;AACAJ,UAAAA,SAAS,CAACK,eAAV,CAA0BN,kBAA1B,EAA8CO,IAA9C,CACE,UAAAnC,MAAM,EAAI;AACRvD,YAAAA,QAAQ,CAAC2F,aAAT,CAAuB,OAAvB,EAAgCrC,SAAhC,GAA4CC,MAA5C;AACD,WAHH,EAIE,UAAA7C,KAAK,EAAI;AACPC,YAAAA,KAAK,CAAC,4CAAD,CAAL;AACD,WANH;AAQA;AACD,SAd0D,CAe3D;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAyE,QAAAA,SAAS,CAACQ,YAAV,CACGC,YADH,CACgBV,kBADhB,EAEGO,IAFH,CAEQ,UAASnC,MAAT,EAAiB;AACrBvD,UAAAA,QAAQ,CAAC2F,aAAT,CAAuB,OAAvB,EAAgCrC,SAAhC,GAA4CC,MAA5C,CADqB,CAGrB;AACD,SANH,EAOGuC,KAPH,CAOS,UAASpF,KAAT,EAAgB;AACrBqF,UAAAA,OAAO,CAACrF,KAAR,CAAcA,KAAd;AACD,SATH;AAUD,OAjCD;AAmCA;AACA;;AACA;;;AACA,UAAIsF,QAAJ,CAjKO,CAiKO;;AACd,UAAIC,eAAe,GAAG,EAAtB;AACA;;AACA,UAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB;AACAjH,QAAAA,UAAU,CAACkH,SAAX,GAAuBnG,QAAQ,CAACO,cAAT,CAAwB,YAAxB,CAAvB;AACA,YAAI6F,MAAM,GAAGpG,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACA,YAAIoG,MAAM,GAAGrG,QAAQ,CAACsG,gBAAT,CAA0B,OAA1B,CAAb;AAEA,YAAIC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAd;AAEA;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,MAAM,CAAClC,MAA7B,EAAqCsC,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,cAAIE,CAAC,GAAGN,MAAM,CAACI,CAAD,CAAd;AACA,cAAI,CAACE,CAAC,CAACvE,EAAP,EAAW;;AACX,cAAI;AACF,gBAAIwE,KAAK,GAAGD,CAAC,CAACE,UAAF,GAAeF,CAAC,CAACG,WAA7B;AACA,gBAAIC,CAAC,GAAGJ,CAAC,CAACE,UAAF,GAAe,GAAvB;AACA,gBAAIG,CAAC,GAAGC,QAAQ,CAACF,CAAC,GAAGH,KAAL,EAAY,EAAZ,CAAhB;AACAR,YAAAA,MAAM,CAAChD,YAAP,CAAoB,OAApB,EAA6B2D,CAA7B;AACAX,YAAAA,MAAM,CAAChD,YAAP,CAAoB,QAApB,EAA8B4D,CAA9B;AACAT,YAAAA,OAAO,CAACW,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBH,CAAvB,EAA0BC,CAA1B;AACAT,YAAAA,OAAO,CAACY,SAAR,CAAkBR,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2BI,CAA3B,EAA8BC,CAA9B;AACAL,YAAAA,CAAC,CAACrE,KAAF,CAAQC,KAAR,GAAgB,OAAhB;AACAoE,YAAAA,CAAC,CAACrE,KAAF,CAAQE,MAAR,GAAiB,OAAjB,CATE,CASwB;;AAC1BmE,YAAAA,CAAC,CAACrE,KAAF,CAAQ8E,eAAR,iBAAiChB,MAAM,CAACiB,SAAP,CAAiB,WAAjB,CAAjC;AACAV,YAAAA,CAAC,CAACrE,KAAF,CAAQgF,cAAR,GAAyB,OAAzB;AACD,WAZD,CAYE,OAAOnE,CAAP,EAAU;AACV;AACD;AACF;AAED;;;AACAzE,QAAAA,WAAW,CAACsB,QAAQ,CAACO,cAAT,CAAwB,kBAAxB,CAAD,CAAX,CAAyDmF,IAAzD,CAA8D,UAC5DU,MAD4D,EAE5D;AACAzH,UAAAA,KAAK,CACF4I,IADH,CACQ,UADR,EACoB;AAChBC,YAAAA,GAAG,EAAEpB,MAAM,CAACiB,SAAP,CAAiB,WAAjB;AADW,WADpB,EAIG3B,IAJH,CAIQ,UAAA+B,QAAQ,EAAI;AAChB1B,YAAAA,OAAO,CAAC2B,GAAR,CAAYD,QAAQ,CAACE,IAArB;;AACA,gBAAIF,QAAQ,CAACE,IAAT,CAAcA,IAAd,KAAuB,KAA3B,EAAkC;AAChC1B,cAAAA,eAAe,GAAG,KAAlB;AACD;;AACD,gBACEwB,QAAQ,CAACE,IAAT,CAAcjD,OAAd,IACA,4BAFF,EAGE;AACAuB,cAAAA,eAAe,GAAG,IAAlB;AACD,aALD,MAKO,IACLwB,QAAQ,CAACE,IAAT,CAAcjD,OAAd,IACA,4BAFK,EAGL;AACAuB,cAAAA,eAAe,GAAG,IAAlB;AACD,aALM,MAKA;AACLA,cAAAA,eAAe,GAAG,KAAlB;AACD;;AACDF,YAAAA,OAAO,CAAC2B,GAAR,CAAYD,QAAQ,CAACE,IAArB;AACD,WAvBH,EAwBG7B,KAxBH,CAwBS,UAAA3C,CAAC,EAAI;AACV4C,YAAAA,OAAO,CAAC2B,GAAR,CAAYvE,CAAZ;AACD,WA1BH;AA2BD,SA9BD;;AAgCA,QAAA,MAAI,CAACyE,QAAL,CAAc;AACZ9H,UAAAA,SAAS,EAAE;AADC,SAAd;;AAIAE,QAAAA,QAAQ,CAACO,cAAT,CAAwB,YAAxB,EAAsCsH,SAAtC,GAAkD5B,eAAlD;;AAEA,QAAA,MAAI,CAAC2B,QAAL,CAAc;AAAE/H,UAAAA,OAAO,EAAEoG;AAAX,SAAd;;AAEApC,QAAAA,UAAU,CAAC,YAAM;AACf,UAAA,MAAI,CAAC+D,QAAL,CAAc;AACZ9H,YAAAA,SAAS,EAAE,IADC;AAEZD,YAAAA,OAAO,EAAE;AAFG,WAAd;AAID,SALS,EAKP,IALO,CAAV,CAtEoB,CA2EV;AACX,OA5ED;;AA6EA,UAAMiI,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB;;AAEA;AACA;AACA,YAAI,MAAI,CAACtI,KAAL,CAAWI,gBAAX,IAA+B,KAAnC,EAA0C;AACxCI,UAAAA,QAAQ,CAACO,cAAT,CAAwB,aAAxB,EAAuCsH,SAAvC,GACE,eADF;AAEA7H,UAAAA,QAAQ,CAACO,cAAT,CAAwB,YAAxB,EAAsC+B,KAAtC,CAA4CyF,UAA5C,GAAyD,SAAzD;AACA/H,UAAAA,QAAQ,CAACO,cAAT,CAAwB,YAAxB,EAAsCsH,SAAtC,GAAkD,IAAlD;;AAEA,UAAA,MAAI,CAACD,QAAL,CAAc;AACZjI,YAAAA,kBAAkB,EAAE,IADR;AAEZC,YAAAA,gBAAgB,EAAE;AAFN,WAAd;;AAKAiE,UAAAA,UAAU,CAAC,YAAM;AACf7D,YAAAA,QAAQ,CAACO,cAAT,CAAwB,YAAxB,EAAsC+B,KAAtC,CAA4CyF,UAA5C,GAAyD,SAAzD;;AAEA,YAAA,MAAI,CAACH,QAAL,CAAc;AACZjI,cAAAA,kBAAkB,EAAE,KADR;AAEZG,cAAAA,SAAS,EAAE;AAFC,aAAd;AAID,WAPS,EAOP,IAPO,CAAV,CAXwC,CAkB9B;;AAEVkG,UAAAA,QAAQ,GAAGgC,WAAW,CAAC,YAAW;AAChCjC,YAAAA,OAAO,CAAC2B,GAAR,CAAY,YAAZ;AAEAxB,YAAAA,OAAO;AACR,WAJqB,EAInB,IAJmB,CAAtB;AAKD,SAzBD,MAyBO;AACL+B,UAAAA,aAAa,CAACjC,QAAD,CAAb;;AAEA,UAAA,MAAI,CAAC4B,QAAL,CAAc;AACZhI,YAAAA,gBAAgB,EAAE,KADN;AAEZD,YAAAA,kBAAkB,EAAE,IAFR;AAGZG,YAAAA,SAAS,EAAE;AAHC,WAAd;;AAMAE,UAAAA,QAAQ,CAACO,cAAT,CAAwB,YAAxB,EAAsCsH,SAAtC,GAAkD,KAAlD;AACA7H,UAAAA,QAAQ,CAACO,cAAT,CAAwB,YAAxB,EAAsC+B,KAAtC,CAA4CyF,UAA5C,GAAyD,SAAzD;AAEA/H,UAAAA,QAAQ,CAACO,cAAT,CAAwB,aAAxB,EAAuCsH,SAAvC,GACE,eADF;AAGAhE,UAAAA,UAAU,CAAC,YAAM;AACf,YAAA,MAAI,CAAC+D,QAAL,CAAc;AACZjI,cAAAA,kBAAkB,EAAE;AADR,aAAd;AAGD,WAJS,EAIP,IAJO,CAAV,CAfK,CAmBK;AACX;AACF,OAnDD,CAjPO,CAsSP;AAEA;AACA;;;AAEA,UAAMuI,WAAW,GAAG,SAAdA,WAAc,CAAAzH,MAAM,EAAI;AAC5B,YAAI0H,WAAW,GAAG,MAAM1H,MAAxB;AACA,YAAI2H,kBAAkB,GAAG,aAAa3H,MAAtC;AACA,YAAI4H,IAAI,GAAG,wCAAX;AACAA,QAAAA,IAAI,IACF,wBACAF,WADA,GAEA,oBAFA,GAGAA,WAHA,GAIA,MALF;AAMAE,QAAAA,IAAI,IAAI,MAAR;AACAA,QAAAA,IAAI,IACF,+BACAD,kBADA,GAEA,oBAFA,GAGAA,kBAHA,GAIA,MALF;AAMA,YAAIE,WAAW,GAAGtI,QAAQ,CAACO,cAAT,CAAwB,WAAxB,CAAlB;AACA+H,QAAAA,WAAW,CAACT,SAAZ,GAAwBQ,IAAxB;AACAC,QAAAA,WAAW,CAAChG,KAAZ,CAAkBiG,OAAlB,GAA4B,OAA5B,CAnB4B,CAoB5B;AACA;AACA;;AACA,QAAA,MAAI,CAAC/I,KAAL,CAAWC,SAAX,GAAuB2I,kBAAvB;AACD,OAxBD;AA0BA;;;AACA,UAAI3H,MAAM,GAAG,EAAb;;AACA,UAAI4D,YAAY,CAACmE,OAAb,CAAqBvJ,UAAU,CAACuC,kBAAhC,CAAJ,EAAyD;AACvDf,QAAAA,MAAM,GAAG4D,YAAY,CAACmE,OAAb,CAAqBvJ,UAAU,CAACuC,kBAAhC,CAAT;AACD,OAFD,MAEO;AACLf,QAAAA,MAAM,GAAGxB,UAAU,CAACwJ,KAAX,EAAT;AACD;;AACD,UAAIC,SAAS,GAAG1I,QAAQ,CAAC2I,sBAAT,CAAgC,SAAhC,CAAhB;AAEAD,MAAAA,SAAS,CAACE,KAAV,GAAkBnI,MAAlB;;AACAiI,MAAAA,SAAS,CAACG,OAAV,GAAoBH,SAAS,CAACI,OAAV,GAAoBJ,SAAS,CAACK,OAAV,GAAoB,YAAW;AACrE1E,QAAAA,YAAY,CAACC,OAAb,CACErF,UAAU,CAACuC,kBADb,EAEExB,QAAQ,CAACO,cAAT,CAAwB,SAAxB,EAAmCqI,KAFrC;AAID,OALD;;AAMA,UAAII,UAAU,GAAG9J,MAAM,CAACmC,QAAP,CAAgB4H,IAAhB,CAAqB/H,OAArB,CAA6B,GAA7B,EAAkC,EAAlC,CAAjB;;AACA,UAAI8H,UAAU,CAAC7E,MAAX,IAAqB6E,UAAU,CAAC1D,OAAX,CAAmB,UAAnB,MAAmC,CAA5D,EAA+D;AAC7D0D,QAAAA,UAAU,GAAG,EAAb;AACD,OAxVM,CA0VP;;;AACA,UAAIvI,MAAM,GAAG4D,YAAY,CAACmE,OAAb,CAAqB,QAArB,CAAb;;AAEA,UAAI,CAAC/H,MAAD,IAAWuI,UAAU,CAAC7E,MAA1B,EAAkC;AAChC1D,QAAAA,MAAM,GAAGuI,UAAT;AACD;;AACD,UAAIvI,MAAM,IAAIA,MAAM,CAAC0D,MAArB,EAA6B;AAC3BE,QAAAA,YAAY,CAACC,OAAb,CAAqBrF,UAAU,CAACuC,kBAAhC,EAAoDf,MAApD;AAEA;;AACA,SAAC,SAASyI,mBAAT,GAA+B;AAC9BjK,UAAAA,UAAU,CAACkK,aAAX,CAAyB1I,MAAzB,EAAiC,UAASD,WAAT,EAAsB;AACrD,gBAAIA,WAAJ,EAAiB;AACfvB,cAAAA,UAAU,CAAC+F,IAAX,CAAgBvE,MAAhB;AACA;AACD;;AACDoD,YAAAA,UAAU,CAACqF,mBAAD,EAAsB,IAAtB,CAAV;AACD,WAND;AAOD,SARD;AASD;AAED;;;AACA,UACE9D,SAAS,CAACnG,UAAV,IACAmG,SAAS,CAACnG,UAAV,CAAqBoE,IAArB,KAA8B,UAD9B,IAEA+B,SAAS,CAACnG,UAAV,CAAqBmK,WAArB,IAAoC,KAHtC,EAIE;AACAzI,QAAAA,KAAK,CAAC,4DAAD,CAAL;AACD;;AAED,0BACE,oBAAC,UAAD;AAAY,QAAA,EAAE,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,eAAD;AAAiB,QAAA,EAAE,EAAC,kBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,gBAAD;AAAkB,QAAA,MAAM,EAAE,KAAKnB,KAA/B;AAAsC,QAAA,YAAY,EAAEsI,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD;AAtbH;;AAAA;AAAA,EAA+BrJ,SAA/B;AAybA,eAAea,SAAf","sourcesContent":["/**\n * 담당자:조윤영 Edit By.한예지\n * [OUTLINE]\n * VideoItem파일은 화상회의 비디오를 표시하는 비디오 컴포넌트이다.\n * <p>\n * [METHOD]\n * getScreenId(error, sourceId, screen_constraints): 화면 공유 함수\n * disableInputButtons(): 상황에 맞춰 버튼들을 비활성화하는 함수\n * openRoom(): 신규 화상회의 방 개설하는 함수\n * joinRoom(): 기존 개설된 화상회의 방을 들어가는 함수\n * openOrJoinRoom(): 신규 화상회의방을 개설하고 들어가는 함수\n *\n * <p>\n * [LIBRARY]\n * 1. io: socket에 연결하기 위한 라이브러리\n */\nimport React, { Component } from \"react\";\nimport html2canvas from \"html2canvas\";\nimport axios from \"axios\";\nimport * as service from \"./getHTMLMediaElement\";\nimport EmotionStatusBar from \"./EmotionStatusBar\";\nimport loading from \"../../../assets/conference/emotion_loading.gif\";\n\nimport { VideoFrame, VideosContainer } from \"./webrtc.style\";\n\nvar connection = new window.RTCMultiConnection();\nconnection.autoCloseEntireSession = true; //개설자가 방을 나가면 방을 닫는 설정\nconnection.socketURL = \"https://rtcmulticonnection.herokuapp.com:443/\"; //socket.io 신호 서버 URL을 설정\n\nexport class VideoItem extends Component {\n  //FIXME:state값 추가함\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      roomToken: \"\",\n      dummy: [],\n      isShowEmotionStart: false,\n      isEmotionHearing: false,\n      emotion: \"\",\n      isWaiting: false\n    };\n  }\n\n  /*script가져오는 함수 */\n  componentWillMount() {\n    const script = document.createElement(\"script\");\n\n    script.src = \"https://cdn.webrtc-experiment.com/RTCMultiConnection.js\";\n    script.src = \"https://cdn.webrtc-experiment.com/conversation.js\";\n\n    script.src =\n      \"https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js\";\n    script.src =\n      \"https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js\";\n    script.src =\n      \"https://rtcmulticonnection.herokuapp.com/node_modules/webrtc-adapter/out/adapter.js\";\n    script.src = \"./getHTMLMediaElement.jsx\";\n\n    script.src = \"https://cdn.WebRTC-Experiment.com/getScreenId.js\";\n    script.src = \"https://webrtc.github.io/adapter/adapter-latest.js\";\n\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n  componentDidMount() {\n    /*신규 화상회의방을 개설하고 들어가는 함수 */\n    connection.openOrJoin(\n      document.getElementById(\"testRoomId\", function(\n        isRoomExist,\n        roomid,\n        error\n      ) {\n        if (error) {\n          // disableInputButtons(true);\n          alert(error);\n        } else if (connection.isInitiator === true) {\n          // showRoomURL(roomid);\n        }\n      })\n    );\n    // this.props 는 아직 바뀌지 않은 상태\n  }\n\n  render() {\n    (function() {\n      var params = {},\n        r = /([^&=]+)=?([^&]*)/g;\n      function d(s) {\n        return decodeURIComponent(s.replace(/\\+/g, \" \"));\n      }\n      var match,\n        search = window.location.search;\n      while ((match = r.exec(search.substring(1))))\n        params[d(match[1])] = d(match[2]);\n      window.params = params;\n    })();\n\n    connection.socketMessageEvent = \"video-conference-demo\";\n\n    connection.session = {\n      audio: true,\n      video: true\n    };\n\n    connection.sdpConstraints.mandatory = {\n      OfferToReceiveAudio: true,\n      OfferToReceiveVideo: true\n    };\n\n    var videoCpy;\n\n    connection.onstream = function(event) {\n      //connection1\n      // event.mediaContainer.style.width=\"\"\n      connection.videosContainer = document.getElementById(\"videos-container\"); //1개 이상의 비디오들을 담을 div공간을 id값으로 가져온다.\n      var video = document.createElement(\"video\"); //비디오 컴포넌트를 생성한다.\n      video.id = event.streamid; //각 비디오 화면에 각 스트림의 고유 식별자를 붙인다.\n      video.style.width = \"100%\";\n      video.style.height = \"100%\";\n\n      video.style.border = \"solid 1px var(--greenish-teal)\";\n\n      event.mediaElement.removeAttribute(\"src\");\n      event.mediaElement.removeAttribute(\"srcObject\");\n      event.mediaElement.muted = true;\n      event.mediaElement.volume = 0;\n\n      //FIXME:\n      var existing = document.getElementById(event.streamid);\n      if (existing && existing.parentNode) {\n        existing.parentNode.removeChild(existing);\n      }\n\n      try {\n        video.setAttributeNode(document.createAttribute(\"autoplay\"));\n        video.setAttributeNode(document.createAttribute(\"playsinline\"));\n      } catch (e) {\n        video.setAttribute(\"autoplay\", true);\n        video.setAttribute(\"playsinline\", true);\n      }\n\n      if (event.type === \"local\") {\n        video.volume = 0;\n        try {\n          video.setAttributeNode(document.createAttribute(\"muted\"));\n        } catch (e) {\n          video.setAttribute(\"muted\", true);\n        }\n      }\n\n      video.srcObject = event.stream; //비디오에 stream을 연결한다.\n\n      connection.videosContainer.style.width = \"100%\";\n      var width = 400;\n\n      var mediaElement = service.getHTMLMediaElement(video, {\n        title: event.userid,\n        buttons: [\"mute-audio\", \"mute-video\"],\n        width: width,\n        showOnMouseEnter: false\n      });\n\n      connection.videosContainer.appendChild(mediaElement); //비디오를 div공간에 추가한다.\n\n      //TODO: get\n      setTimeout(function() {\n        mediaElement.media.play();\n      }, 5000);\n      mediaElement.id = event.streamid;\n\n      if (event.type === \"local\") {\n        connection.socket.on(\"disconnect\", function() {\n          if (!connection.getAllParticipants().length) {\n            window.location.reload();\n          }\n        });\n      }\n      localStorage.setItem(connection.socketMessageEvent, connection.sessionid);\n      videoCpy = video;\n    };\n\n    //connection2\n    connection.onstreamended = function(event) {\n      var mediaElement = document.getElementById(event.streamid);\n      if (mediaElement) {\n        mediaElement.parentNode.removeChild(mediaElement);\n      }\n    };\n    connection.onMediaError = function(e) {\n      if (e.message === \"Concurrent mic process limit.\") {\n        if (window.DetectRTC.audioInputDevices.length <= 1) {\n          alert(\n            \"Please select external microphone. Check github issue number 483.\"\n          );\n          return;\n        }\n        var secondaryMic = window.DetectRTC.audioInputDevices[1].deviceId;\n        connection.mediaConstraints.audio = {\n          deviceId: secondaryMic\n        };\n        connection.join(connection.sessionid);\n      }\n    };\n\n    //TODO: 화면 공유 버튼 on/off state에 따라서 함수 실행시키기\n    /*화면 공유 함수*/\n    const getScreenId = (error, sourceId, screen_constraints) => {\n      if (\n        navigator.userAgent.indexOf(\"Edge\") !== -1 &&\n        (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)\n      ) {\n        navigator.getDisplayMedia(screen_constraints).then(\n          stream => {\n            document.querySelector(\"video\").srcObject = stream;\n          },\n          error => {\n            alert(\"Please make sure to use Edge 17 or higher.\");\n          }\n        );\n        return;\n      }\n      //TODO: 화면 공유 버튼 on/off state에 따라서 함수 실행시키기\n      //chrome extension 설치 여부 detection\n      // const getChromeExtensionStatus = status => {\n      //   if (status === \"installed-enabled\") alert(\"installed\");\n      //   if (status === \"installed-disabled\") alert(\"installed but disabled\");\n      //   // etc.\n      // };\n\n      navigator.mediaDevices\n        .getUserMedia(screen_constraints)\n        .then(function(stream) {\n          document.querySelector(\"video\").srcObject = stream;\n\n          // share this \"MediaStream\" object using RTCPeerConnection API\n        })\n        .catch(function(error) {\n          console.error(error);\n        });\n    };\n\n    /*******************************************/\n    //감정인식 로직: 화면의 비율 가로길이 기준으로 3/2이상은 펼쳐져 있어야 정상 작동하는 모습 볼 수 있음..\n    /*******************************************/\n    let playTran; //실시간 전송하기 위한 변수\n    var emotionResponse = \"\";\n    /* 비디오 캡처하는 함수*/\n    const capture = () => {\n      /*videos-container 캡쳐하기 전 비디오 위에 비디오 캡쳐 이미지 놓기*/\n      connection.showImage = document.getElementById(\"show-image\");\n      var canvas = document.createElement(\"canvas\");\n      var videos = document.querySelectorAll(\"video\");\n\n      var context = canvas.getContext(\"2d\");\n\n      /*비디오 각각을 반복문을 통해 별도로 캡쳐*/\n      for (var i = 0, len = videos.length; i < len; i++) {\n        var v = videos[i];\n        if (!v.id) continue;\n        try {\n          var ratio = v.videoWidth / v.videoHeight;\n          var w = v.videoWidth - 100;\n          var h = parseInt(w / ratio, 10);\n          canvas.setAttribute(\"width\", w);\n          canvas.setAttribute(\"height\", h);\n          context.fillRect(0, 0, w, h);\n          context.drawImage(v, 0, 0, w, h);\n          v.style.width = \"400px\";\n          v.style.height = \"300px\"; //-->이걸로 해결\n          v.style.backgroundImage = `url(${canvas.toDataURL(\"image/png\")})`;\n          v.style.backgroundSize = \"cover\";\n        } catch (e) {\n          continue;\n        }\n      }\n\n      /*videos-container 캡쳐*/\n      html2canvas(document.getElementById(\"videos-container\")).then(function(\n        canvas\n      ) {\n        axios\n          .post(\"/emotion\", {\n            img: canvas.toDataURL(\"image/png\")\n          })\n          .then(response => {\n            console.log(response.data);\n            if (response.data.data === false) {\n              emotionResponse = \"...\";\n            }\n            if (\n              response.data.message ==\n              \"과반수 이상의 참여자가 긍정의 반응을 보였습니다\"\n            ) {\n              emotionResponse = \"긍정\";\n            } else if (\n              response.data.message ==\n              \"과반수 이상의 참여자가 부정의 반응을 보였습니다\"\n            ) {\n              emotionResponse = \"부정\";\n            } else {\n              emotionResponse = \"무표정\";\n            }\n            console.log(response.data);\n          })\n          .catch(e => {\n            console.log(e);\n          });\n      });\n\n      this.setState({\n        isWaiting: false\n      });\n\n      document.getElementById(\"emotionDiv\").innerHTML = emotionResponse;\n\n      this.setState({ emotion: emotionResponse });\n\n      setTimeout(() => {\n        this.setState({\n          isWaiting: true,\n          emotion: \"none\"\n        });\n      }, 2000); // 시간. 2초 후 실행\n    };\n    const EmotionCheck = () => {\n      //디자인 토글\n\n      /*5초마다 capture() 호출*/\n      //capture();\n      if (this.state.isEmotionHearing == false) {\n        document.getElementById(\"showEmotion\").innerHTML =\n          \"감정 분석을 시작합니다.\";\n        document.getElementById(\"emotionBtn\").style.background = \"#28875f\";\n        document.getElementById(\"emotionDiv\").innerHTML = \"ON\";\n\n        this.setState({\n          isShowEmotionStart: true,\n          isEmotionHearing: true\n        });\n\n        setTimeout(() => {\n          document.getElementById(\"emotionBtn\").style.background = \"#2e373e\";\n\n          this.setState({\n            isShowEmotionStart: false,\n            isWaiting: true\n          });\n        }, 2000); // 시간. 2초 후 실행\n\n        playTran = setInterval(function() {\n          console.log(\"감정인식 중입니다.\");\n\n          capture();\n        }, 6000);\n      } else {\n        clearInterval(playTran);\n\n        this.setState({\n          isEmotionHearing: false,\n          isShowEmotionStart: true,\n          isWaiting: false\n        });\n\n        document.getElementById(\"emotionDiv\").innerHTML = \"OFF\";\n        document.getElementById(\"emotionBtn\").style.background = \"#ae4747\";\n\n        document.getElementById(\"showEmotion\").innerHTML =\n          \"감정 분석을 종료합니다.\";\n\n        setTimeout(() => {\n          this.setState({\n            isShowEmotionStart: false\n          });\n        }, 2000); // 시간. 2초 후 실행\n      }\n    };\n\n    // const onStop = () => {\n\n    //   console.log(\"종료\");\n    // };\n\n    const showRoomURL = roomid => {\n      var roomHashURL = \"#\" + roomid;\n      var roomQueryStringURL = \"?roomid=\" + roomid;\n      var html = \"<h2>Unique URL for your room:</h2><br>\";\n      html +=\n        'Hash URL: <a href=\"' +\n        roomHashURL +\n        '\" target=\"_blank\">' +\n        roomHashURL +\n        \"</a>\";\n      html += \"<br>\";\n      html +=\n        'QueryString URL: <a href=\"' +\n        roomQueryStringURL +\n        '\" target=\"_blank\">' +\n        roomQueryStringURL +\n        \"</a>\";\n      var roomURLsDiv = document.getElementById(\"room-urls\");\n      roomURLsDiv.innerHTML = html;\n      roomURLsDiv.style.display = \"block\";\n      //FIXME:state값 추가함\n      // this.state.roomToken = roomQueryStringURL;\n      // this.state.roomKey = html;\n      this.state.roomToken = roomQueryStringURL;\n    };\n\n    /*roomid setting*/\n    var roomid = \"\";\n    if (localStorage.getItem(connection.socketMessageEvent)) {\n      roomid = localStorage.getItem(connection.socketMessageEvent);\n    } else {\n      roomid = connection.token();\n    }\n    var txtRoomId = document.getElementsByClassName(\"room-id\");\n\n    txtRoomId.value = roomid;\n    txtRoomId.onkeyup = txtRoomId.oninput = txtRoomId.onpaste = function() {\n      localStorage.setItem(\n        connection.socketMessageEvent,\n        document.getElementById(\"room-id\").value\n      );\n    };\n    var hashString = window.location.hash.replace(\"#\", \"\");\n    if (hashString.length && hashString.indexOf(\"comment-\") === 0) {\n      hashString = \"\";\n    }\n\n    //TODO: roomid를 직접 받아와야하는 부분\n    var roomid = localStorage.getItem(\"roomId\");\n\n    if (!roomid && hashString.length) {\n      roomid = hashString;\n    }\n    if (roomid && roomid.length) {\n      localStorage.setItem(connection.socketMessageEvent, roomid);\n\n      /*auto-join-room*/\n      (function reCheckRoomPresence() {\n        connection.checkPresence(roomid, function(isRoomExist) {\n          if (isRoomExist) {\n            connection.join(roomid);\n            return;\n          }\n          setTimeout(reCheckRoomPresence, 5000);\n        });\n      })();\n    }\n\n    /*detect 2G*/\n    if (\n      navigator.connection &&\n      navigator.connection.type === \"cellular\" &&\n      navigator.connection.downlinkMax <= 0.115\n    ) {\n      alert(\"2G is not supported. Please use a better internet service.\");\n    }\n\n    return (\n      <VideoFrame id=\"video-home-container\">\n        <VideosContainer id=\"videos-container\" />\n        <EmotionStatusBar status={this.state} EmotionCheck={EmotionCheck} />\n      </VideoFrame>\n    );\n  }\n}\n\nexport default VideoItem;\n"]},"metadata":{},"sourceType":"module"}