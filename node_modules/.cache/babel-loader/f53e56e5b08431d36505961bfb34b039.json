{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\src\\\\components\\\\independent\\\\issue\\\\issues\\\\Issues.jsx\";\n\n/**\n * 담당자:조윤영\n * [OUTLINE]\n * 이슈 화면의 진행상황별 리스트를 생성하고 카드의 상화/좌우 이동을 관리하는 컴포넌트 파일\n */\nimport React, { Component, Fragment } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport InitialData from \"../testItem-data\";\nimport IssueBox from \"./IssueBox\";\nimport { Issue3, IssueBig } from \"./issues.style\";\nimport * as service from \"../../../../services/IssueService\";\nexport var Issues = /*#__PURE__*/function (_Component) {\n  _inherits(Issues, _Component);\n\n  function Issues() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Issues);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Issues)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      taskLists: [],\n      taskItemLists: [],\n      currentDep: \"\"\n    };\n\n    _this.onDragStart = function () {// document.childNodes.backgroundColor = \"orange\";\n    };\n\n    _this.onDragEnd = function (result) {\n      var _objectSpread3;\n\n      var _this$state = _this.state,\n          taskLists = _this$state.taskLists,\n          updateTaskList = _this$state.updateTaskList; //TODO:reorder our column(열)\n\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId;\n\n      if (!destination) {\n        //끌어다놓은 위치가 범위를 벗어날 경우,\n        return;\n      }\n\n      if ( //끌어다놓은 위치가 동일할 경우,\n      destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      var start = taskLists[source.droppableId];\n      var finish = taskLists[destination.droppableId]; //같은 상태공간에서 움직일 경우,열 내에서의 이동(행 간 이동)\n      //이상 무\n\n      if (start === finish) {\n        var newItemIds = Array.from(start.taskIds);\n        newItemIds.splice(source.index, 1); //드래그하는 해당 카드를 배열에서 삭제\n\n        newItemIds.splice(destination.index, 0, draggableId); //드래그를 끝낸 위치에 드래그하는 카드를 추가한다.\n\n        var newColumn = _objectSpread({}, start, {\n          taskIds: newItemIds\n        });\n\n        var _newState = _objectSpread({}, _this.state, {\n          taskLists: _objectSpread({}, _this.state.taskLists, _defineProperty({}, newColumn.status, newColumn))\n        });\n\n        _this.setState({\n          taskLists: _newState.taskLists\n        });\n\n        console.log(\"요청을 보내는 taskLists\", _this.state.taskLists);\n        service.postUpdateIssue(_newState.taskLists).then(function (res) {\n          console.log(\"************이슈 업데이트****************\");\n          console.log(res.data);\n          console.log(\"************이슈 업데이트****************\");\n        });\n        return;\n      } // //Moving from one list to another\n      //열 간의 이동, 상태의 변화가 있을 경우,\n\n\n      var startItemIds = Array.from(start.taskIds);\n      startItemIds.splice(source.index, 1);\n\n      var newStart = _objectSpread({}, start, {\n        taskIds: startItemIds\n      });\n\n      var finishItemIds = Array.from(finish.taskIds);\n      console.log(destination.index); //FIXME: 봐봐 여기 destination.index처럼 draggableId도 숫자 index값을 가져야하는거야\n\n      finishItemIds.splice(destination.index, 0, draggableId);\n\n      var newFinish = _objectSpread({}, finish, {\n        taskIds: finishItemIds\n      });\n\n      var newState = _objectSpread({}, _this.state, {\n        taskLists: _objectSpread({}, _this.state.taskLists, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStart.status, newStart), _defineProperty(_objectSpread3, newFinish.status, newFinish), _objectSpread3))\n      });\n\n      _this.setState({\n        taskLists: newState.taskLists\n      });\n\n      console.log(\"요청을 보내는 taskLists\", newState.taskLists);\n      service.postUpdateIssue(newState.taskLists).then(function (res) {\n        console.log(\"************이슈 업데이트****************\");\n        console.log(res.data);\n        console.log(\"************이슈 업데이트****************\");\n      });\n      return;\n    };\n\n    return _this;\n  }\n\n  _createClass(Issues, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      console.log(\"hi\", nextProps.currentDep);\n\n      if (nextProps != null) {\n        service.postIssueList(nextProps.currentDep).then(function (res) {\n          var _res$data$data = res.data.data,\n              taskLists = _res$data$data.columnData,\n              taskItemLists = _res$data$data.taskData;\n          console.log(\"현재 보여주고 있는 이슈 리스트의 역할은\", nextProps.currentDep);\n\n          _this2.setState({\n            taskLists: taskLists,\n            taskItemLists: taskItemLists\n          });\n\n          _this2.setState({\n            currentDep: nextProps.currentDep\n          });\n\n          console.log(\"초기 taskLists\", _this2.state.taskLists);\n        }, function (err) {\n          console.log(\"이슈 아이템 가져오기 실패\");\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      service.postIssueList(localStorage.getItem(\"myRole\")).then(function (res) {\n        var _res$data$data2 = res.data.data,\n            taskLists = _res$data$data2.columnData,\n            taskItemLists = _res$data$data2.taskData;\n        console.log(\"현재 보여주고 있는 이슈 리스트의 역할은\", localStorage.getItem(\"myRole\"));\n\n        _this3.setState({\n          taskLists: taskLists,\n          taskItemLists: taskItemLists\n        });\n\n        _this3.setState({\n          currentDep: localStorage.getItem(\"myRole\")\n        });\n\n        console.log(\"초기 taskLists\", _this3.state.taskLists);\n      }, function (err) {\n        console.log(\"이슈 아이템 가져오기 실패\");\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return /*#__PURE__*/React.createElement(IssueBig, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(DragDropContext, {\n        onDragStart: this.onDragStart,\n        onDragUpdate: this.onDragUpdate,\n        onDragEnd: this.onDragEnd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }\n      }, Object.keys(this.state.taskLists).map(function (columnId, index) {\n        var column = _this4.state.taskLists[columnId];\n        var tasks = [];\n        var tasksByDep = [];\n        column.taskIds.forEach(function (id) {\n          tasks.push.apply(tasks, _toConsumableArray(_this4.state.taskItemLists.filter(function (item) {\n            return item._id === id;\n          })));\n        });\n        tasksByDep.push(tasks.filter(function (t) {\n          return t.dept === _this4.props.currentDep;\n        }));\n        return /*#__PURE__*/React.createElement(Issue3, {\n          key: column._id,\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(IssueBox, {\n          droppableId: String(index),\n          column: column,\n          tasks: tasksByDep[0],\n          count: tasksByDep[0].length,\n          currentDep: _this4.state.currentDep,\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }\n        }));\n      })));\n    }\n  }]);\n\n  return Issues;\n}(Component);\nexport default Issues;","map":{"version":3,"sources":["C:/Users/o_ov0/Downloads/Front-End-develop/Front-End-develop/client/src/components/independent/issue/issues/Issues.jsx"],"names":["React","Component","Fragment","DragDropContext","InitialData","IssueBox","Issue3","IssueBig","service","Issues","state","taskLists","taskItemLists","currentDep","onDragStart","onDragEnd","result","updateTaskList","destination","source","draggableId","droppableId","index","start","finish","newItemIds","Array","from","taskIds","splice","newColumn","newState","status","setState","console","log","postUpdateIssue","then","res","data","startItemIds","newStart","finishItemIds","newFinish","nextProps","postIssueList","columnData","taskData","err","localStorage","getItem","onDragUpdate","Object","keys","map","columnId","column","tasks","tasksByDep","forEach","id","push","filter","item","_id","t","dept","props","String","length"],"mappings":"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","sourcesContent":["/**\n * 담당자:조윤영\n * [OUTLINE]\n * 이슈 화면의 진행상황별 리스트를 생성하고 카드의 상화/좌우 이동을 관리하는 컴포넌트 파일\n */\nimport React, { Component, Fragment } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport InitialData from \"../testItem-data\";\nimport IssueBox from \"./IssueBox\";\nimport { Issue3, IssueBig } from \"./issues.style\";\nimport * as service from \"../../../../services/IssueService\";\n\nexport class Issues extends Component {\n  state = {\n    taskLists: [],\n    taskItemLists: [],\n    currentDep: \"\"\n  };\n  componentWillReceiveProps(nextProps) {\n    console.log(\"hi\", nextProps.currentDep);\n    if (nextProps != null) {\n      service.postIssueList(nextProps.currentDep).then(\n        res => {\n          const {\n            columnData: taskLists,\n            taskData: taskItemLists\n          } = res.data.data;\n          console.log(\n            \"현재 보여주고 있는 이슈 리스트의 역할은\",\n            nextProps.currentDep\n          );\n          this.setState({ taskLists, taskItemLists });\n          this.setState({ currentDep: nextProps.currentDep });\n          console.log(\"초기 taskLists\", this.state.taskLists);\n        },\n        err => {\n          console.log(\"이슈 아이템 가져오기 실패\");\n        }\n      );\n    }\n  }\n  componentDidMount() {\n    service.postIssueList(localStorage.getItem(\"myRole\")).then(\n      res => {\n        const {\n          columnData: taskLists,\n          taskData: taskItemLists\n        } = res.data.data;\n        console.log(\n          \"현재 보여주고 있는 이슈 리스트의 역할은\",\n          localStorage.getItem(\"myRole\")\n        );\n        this.setState({ taskLists, taskItemLists });\n        this.setState({ currentDep: localStorage.getItem(\"myRole\") });\n        console.log(\"초기 taskLists\", this.state.taskLists);\n      },\n      err => {\n        console.log(\"이슈 아이템 가져오기 실패\");\n      }\n    );\n  }\n\n  onDragStart = () => {\n    // document.childNodes.backgroundColor = \"orange\";\n  };\n\n  onDragEnd = result => {\n    const { taskLists, updateTaskList } = this.state;\n\n    //TODO:reorder our column(열)\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      //끌어다놓은 위치가 범위를 벗어날 경우,\n      return;\n    }\n    if (\n      //끌어다놓은 위치가 동일할 경우,\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n    const start = taskLists[source.droppableId];\n\n    const finish = taskLists[destination.droppableId];\n\n    //같은 상태공간에서 움직일 경우,열 내에서의 이동(행 간 이동)\n    //이상 무\n    if (start === finish) {\n      const newItemIds = Array.from(start.taskIds);\n      newItemIds.splice(source.index, 1); //드래그하는 해당 카드를 배열에서 삭제\n\n      newItemIds.splice(destination.index, 0, draggableId); //드래그를 끝낸 위치에 드래그하는 카드를 추가한다.\n\n      const newColumn = {\n        ...start,\n        taskIds: newItemIds\n      };\n\n      const newState = {\n        ...this.state,\n        taskLists: {\n          ...this.state.taskLists,\n          [newColumn.status]: newColumn\n        }\n      };\n\n      this.setState({ taskLists: newState.taskLists });\n      console.log(\"요청을 보내는 taskLists\", this.state.taskLists);\n      service.postUpdateIssue(newState.taskLists).then(res => {\n        console.log(\"************이슈 업데이트****************\");\n        console.log(res.data);\n        console.log(\"************이슈 업데이트****************\");\n      });\n      return;\n    }\n    // //Moving from one list to another\n    //열 간의 이동, 상태의 변화가 있을 경우,\n\n    const startItemIds = Array.from(start.taskIds);\n    startItemIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startItemIds\n    };\n\n    const finishItemIds = Array.from(finish.taskIds);\n    console.log(destination.index);\n    //FIXME: 봐봐 여기 destination.index처럼 draggableId도 숫자 index값을 가져야하는거야\n    finishItemIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishItemIds\n    };\n\n    const newState = {\n      ...this.state,\n      taskLists: {\n        ...this.state.taskLists,\n        [newStart.status]: newStart,\n        [newFinish.status]: newFinish\n      }\n    };\n    this.setState({ taskLists: newState.taskLists });\n    console.log(\"요청을 보내는 taskLists\", newState.taskLists);\n    service.postUpdateIssue(newState.taskLists).then(res => {\n      console.log(\"************이슈 업데이트****************\");\n      console.log(res.data);\n      console.log(\"************이슈 업데이트****************\");\n    });\n\n    return;\n  };\n\n  render() {\n    return (\n      <IssueBig>\n        <DragDropContext\n          onDragStart={this.onDragStart}\n          onDragUpdate={this.onDragUpdate}\n          onDragEnd={this.onDragEnd}\n        >\n          {/* FIXME:이 부분 다시 나눠서 보내줘야한다. */}\n          {Object.keys(this.state.taskLists).map((columnId, index) => {\n            const column = this.state.taskLists[columnId];\n\n            const tasks = [];\n            const tasksByDep = [];\n            column.taskIds.forEach(id => {\n              tasks.push(\n                ...this.state.taskItemLists.filter(item => item._id === id)\n              );\n            });\n\n            tasksByDep.push(\n              tasks.filter(t => t.dept === this.props.currentDep)\n            );\n            return (\n              <Issue3 key={column._id}>\n                <IssueBox\n                  droppableId={String(index)}\n                  column={column}\n                  tasks={tasksByDep[0]}\n                  count={tasksByDep[0].length}\n                  currentDep={this.state.currentDep}\n                />\n              </Issue3>\n            );\n          })}\n        </DragDropContext>\n      </IssueBig>\n    );\n  }\n}\n\nexport default Issues;\n"]},"metadata":{},"sourceType":"module"}