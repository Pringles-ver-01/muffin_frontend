{"ast":null,"code":"import _slicedToArray from \"/Users/boogiewoogie/WebstormProjects/muffin_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport \"./modal.style.css\"; // import \"./modal.style.css\";\n\n/*\nconst addTransactionAction = (data) => ({\n  type: \"ADD_TRANSACTION\",\n  payload: data,\n});\nexport const TransationReducer = (state = [], action) => {\n  switch (action.type) {\n    case \"ADD_TRANSACTION\":\n      return action.payload;\n    default:\n      return state;\n  }\n};*/\n\nvar ModalSelling = function ModalSelling(props) {\n  var _props$holding = _slicedToArray(props.holding, 1),\n      stockName = _props$holding[0];\n\n  return null;\n  /* const url = \"http://localhost:8080/assets/\";\n   const [sellCount, setSellCount] = useState(1);\n   const [stockName] = props.holding.stockName;\n   // const [symbol] = holding.symbol;\n   const [nowPrice] = props.holding.now;\n   const [transactionDate, setTransactionDate] = useState(new Date());\n  \n   const [purchasePrice, setPurchasePrice] = useState(nowPrice);\n  useEffect(()=>{\n   console.log(props.holding)\n  },[])\n   /!*  const dispatch = useDispatch();\n   const addTransaction = (newTransaction) =>\n     dispatch(addTransactionAction(newTransaction));*!/\n    const decrease = (e) => {\n     e.preventDefault();\n     if(sellCount > 1){\n       setSellCount(sellCount - 1);\n       setPurchasePrice((sellCount - 1) * nowPrice);\n     }else{\n       alert('올바른 수량을 입력세요.');\n     }\n   };\n   const increase = (e) => {\n     e.preventDefault();\n     let possetionedCount = JSON.parse(sessionStorage.getItem(\"users_Asset\")).shareCount;\n     if(possetionedCount > sellCount) {\n       setSellCount(sellCount + 1);\n       setPurchasePrice((sellCount + 1) * nowPrice);\n       console.log(`selling count ++`);\n     } else {\n       alert('올바른 수량을 입력하세요.');\n     }\n   };\n    const submitTransaction = (e) => {\n     e.preventDefault();\n     const newTransaction = {\n       userId : sessionStorage.getItem(\"logined_user\").userId,\n       stockName : stockName,\n       // symbol : symbol,\n       sellCount: sellCount,\n       nowPrice: nowPrice,\n       purchasePrice: purchasePrice,\n       transactionDate : new Date(),\n       transactionType : \"매도\"\n     };\n     console.log(`userId : ${sessionStorage.getItem(\"logined_user\").userId}, stockName : ${stockName} ,sellCount : ${sellCount}, purchasePrice : ${purchasePrice}, 거래일 : ${transactionDate}`)\n     axios\n       .post(url + `/sell`)\n       .then((response) => {\n         console.log(`ModalSelling axios then`);\n         setSellCount(1);\n         setPurchasePrice(props.holding.nowPrice);\n         // dispatch(addTransactionAction(response.data));\n       })\n       .catch((error) => {\n         console.log(`ModalSelling axios catch`);\n         throw error;\n       });\n    };\n   const modalStyle = {\n     content: {\n       width: \"300px\",\n       height: \"400px\",\n     },\n   };\n   return (\n     <>\n       <Modal {...props.holding} style={modalStyle}>\n         <span className=\"text_small \">{props.holding.stockName}</span> <br />\n         <span className=\"text_small\" style={{ \"margin-right\": \"8px\" }}>\n           현재가 {nowPrice}\n         </span>\n         <span className=\"text_small \">{props.holding.now} 원</span> <br />\n         <span className=\"text_small\" style={{ \"margin-right\": \"8px\" }}>\n           매입가\n         </span>\n         <span className=\"text_small \">{purchasePrice} 원</span>\n         <h1>{sellCount} 주</h1>\n         <div>\n           <button\n             className=\"btn btn-default bg-transparent plus_minus_btn btn-rounded btn-raised\"\n             onClick={decrease}\n           >\n             {\" \"}\n             -1{\" \"}\n           </button>\n           <button\n             className=\"btn btn-default bg-transparent plus_minus_btn btn-rounded btn-raised\"\n             onClick={increase}\n           >\n             {\" \"}\n             +1{\" \"}\n           </button>\n         </div>\n         <tr>\n           <td>\n             <button\n               className=\"btn btn-default btn-gray btn-rounded\"\n               onClick={() => !props.isClose}>\n               취소\n             </button>\n           </td>\n           <td>\n             <button\n               className=\"btn btn-default btn-red btn-rounded\"\n               onClick={submitTransaction}>\n               매도\n             </button>\n           </td>\n         </tr>\n       </Modal>\n     </>\n   );*/\n};\n\nexport default ModalSelling;","map":{"version":3,"sources":["/Users/boogiewoogie/WebstormProjects/muffin_frontend/src/components/login/items/ModalSelling.js"],"names":["React","useEffect","useState","Modal","useDispatch","axios","ModalSelling","props","holding","stockName"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP,C,CAEA;;AACA;;;;;;;;;;;;;;AAcA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAAA,sCACVA,KAAK,CAACC,OADI;AAAA,MACvBC,SADuB;;AAE9B,SAAO,IAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA,CAzHD;;AA2HA,eAAeH,YAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport Modal from \"react-modal\";\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport \"./modal.style.css\";\n\n// import \"./modal.style.css\";\n/*\nconst addTransactionAction = (data) => ({\n  type: \"ADD_TRANSACTION\",\n  payload: data,\n});\nexport const TransationReducer = (state = [], action) => {\n  switch (action.type) {\n    case \"ADD_TRANSACTION\":\n      return action.payload;\n    default:\n      return state;\n  }\n};*/\n\nconst ModalSelling = (props) => {\n  const [stockName] = props.holding;\n  return null;\n /* const url = \"http://localhost:8080/assets/\";\n  const [sellCount, setSellCount] = useState(1);\n  const [stockName] = props.holding.stockName;\n  // const [symbol] = holding.symbol;\n  const [nowPrice] = props.holding.now;\n  const [transactionDate, setTransactionDate] = useState(new Date());\n\n\n  const [purchasePrice, setPurchasePrice] = useState(nowPrice);\nuseEffect(()=>{\n  console.log(props.holding)\n},[])\n  /!*  const dispatch = useDispatch();\n  const addTransaction = (newTransaction) =>\n    dispatch(addTransactionAction(newTransaction));*!/\n\n  const decrease = (e) => {\n    e.preventDefault();\n    if(sellCount > 1){\n      setSellCount(sellCount - 1);\n      setPurchasePrice((sellCount - 1) * nowPrice);\n    }else{\n      alert('올바른 수량을 입력세요.');\n    }\n  };\n  const increase = (e) => {\n    e.preventDefault();\n    let possetionedCount = JSON.parse(sessionStorage.getItem(\"users_Asset\")).shareCount;\n    if(possetionedCount > sellCount) {\n      setSellCount(sellCount + 1);\n      setPurchasePrice((sellCount + 1) * nowPrice);\n      console.log(`selling count ++`);\n    } else {\n      alert('올바른 수량을 입력하세요.');\n    }\n  };\n\n  const submitTransaction = (e) => {\n    e.preventDefault();\n    const newTransaction = {\n      userId : sessionStorage.getItem(\"logined_user\").userId,\n      stockName : stockName,\n      // symbol : symbol,\n      sellCount: sellCount,\n      nowPrice: nowPrice,\n      purchasePrice: purchasePrice,\n      transactionDate : new Date(),\n      transactionType : \"매도\"\n    };\n    console.log(`userId : ${sessionStorage.getItem(\"logined_user\").userId}, stockName : ${stockName} ,sellCount : ${sellCount}, purchasePrice : ${purchasePrice}, 거래일 : ${transactionDate}`)\n    axios\n      .post(url + `/sell`)\n      .then((response) => {\n        console.log(`ModalSelling axios then`);\n        setSellCount(1);\n        setPurchasePrice(props.holding.nowPrice);\n        // dispatch(addTransactionAction(response.data));\n      })\n      .catch((error) => {\n        console.log(`ModalSelling axios catch`);\n        throw error;\n      });\n\n  };\n  const modalStyle = {\n    content: {\n      width: \"300px\",\n      height: \"400px\",\n    },\n  };\n  return (\n    <>\n      <Modal {...props.holding} style={modalStyle}>\n        <span className=\"text_small \">{props.holding.stockName}</span> <br />\n        <span className=\"text_small\" style={{ \"margin-right\": \"8px\" }}>\n          현재가 {nowPrice}\n        </span>\n        <span className=\"text_small \">{props.holding.now} 원</span> <br />\n        <span className=\"text_small\" style={{ \"margin-right\": \"8px\" }}>\n          매입가\n        </span>\n        <span className=\"text_small \">{purchasePrice} 원</span>\n        <h1>{sellCount} 주</h1>\n        <div>\n          <button\n            className=\"btn btn-default bg-transparent plus_minus_btn btn-rounded btn-raised\"\n            onClick={decrease}\n          >\n            {\" \"}\n            -1{\" \"}\n          </button>\n          <button\n            className=\"btn btn-default bg-transparent plus_minus_btn btn-rounded btn-raised\"\n            onClick={increase}\n          >\n            {\" \"}\n            +1{\" \"}\n          </button>\n        </div>\n        <tr>\n          <td>\n            <button\n              className=\"btn btn-default btn-gray btn-rounded\"\n              onClick={() => !props.isClose}>\n              취소\n            </button>\n          </td>\n          <td>\n            <button\n              className=\"btn btn-default btn-red btn-rounded\"\n              onClick={submitTransaction}>\n              매도\n            </button>\n          </td>\n        </tr>\n      </Modal>\n    </>\n  );*/\n};\n\nexport default ModalSelling;\n"]},"metadata":{},"sourceType":"module"}