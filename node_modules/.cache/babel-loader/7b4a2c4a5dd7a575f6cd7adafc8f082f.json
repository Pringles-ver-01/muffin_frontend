{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\o_ov0\\\\Downloads\\\\Front-End-develop\\\\Front-End-develop\\\\client\\\\src\\\\components\\\\independent\\\\webRTCRoom\\\\TopicDrawerBar.jsx\";\n\n/**\n * 담당자:조윤영 Edit By.권소영\n * [OUTLINE]\n * TopicDrawerBar파일은 기존 DrawerBar컴포넌트를 고정하여 STT를 적용한 컴포넌트.\n * <p>\n * [METHOD]\n * recognition.onstart(): STT 인식 시작하는 함수\n * recognition.onend(): stt 인식 종료하는 함수\n * recognition.onresult(): 인식된 결과 처리하는 함수\n * recognition.onerror(): 에러를 처리하는 함수\n * onJoin(): STT 시작하는 함수\n * writeMessage(type, name, message): 인식된 메시지 프론트에 기록하는 함수\n * sender(text): socket.io 서버에 유저이름, 인식된 메시지 전송하는 함수\n *\n *\n * <p>\n * [LIBRARY]\n * 1. io: socket에 연결하기 위한 라이브러리\n */\nimport React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport { DrawerContainer, DrawerTitleContainer, RecordTime, TopicContainer, TopicItem, DarkDivideLine, RecordItem, RecordItemColor, RecordBorder, TimeStamp } from \"./webrtc.style\"; //--------------------------------------------------------\n//-----------------Speech Recognition Code----------------\n//--------------------------------------------------------\n\nvar isRecognizing = false;\nvar ignoreEndProcess = false;\nvar finalTranscript = \"\";\nwindow.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\nvar recognition = new window.webkitSpeechRecognition();\nvar language = \"ko-KR\";\nrecognition.continuous = true; // 음성이 인식될 때마다 결과값 반환\n\nrecognition.interimResults = true; // 끝나지 않은 상태의 음성 반환 설정\n\n/** STT 인식 시작 함수*/\n\nrecognition.onstart = function () {\n  isRecognizing = true;\n};\n/** STT 인식 종료 함수*/\n\n\nrecognition.onend = function () {\n  isRecognizing = false;\n\n  if (ignoreEndProcess) {\n    return false;\n  }\n\n  if (!finalTranscript) {\n    return false;\n  }\n};\n/** 인식된 결과 처리 함수 */\n\n\nrecognition.onresult = function (event) {\n  var interimTranscript = \"\";\n\n  if (typeof event.results === \"undefined\") {\n    recognition.onend = null;\n    recognition.stop();\n    return;\n  }\n\n  for (var i = event.resultIndex; i < event.results.length; ++i) {\n    if (event.results[i].isFinal) {\n      // 인식된 문장이 끝났을 경우\n      sender(event.results[i][0].transcript);\n    } else {\n      interimTranscript += event.results[i][0].transcript;\n    }\n  }\n};\n/** 에러 처리 함수 */\n\n\nrecognition.onerror = function (event) {\n  console.log(\"onerror\", event);\n\n  if (event.error.match(/no-speech|audio-capture|not-allowed/)) {\n    ignoreEndProcess = true;\n  }\n};\n/** STT 종료하는 함수 */\n\n\nvar onExit = function onExit() {\n  if (isRecognizing) {\n    recognition.stop();\n    return;\n  }\n}; //--------------------------------------------------------\n//-----------------Send to socket.io Server---------------\n//--------------------------------------------------------\n\n\nvar serverURL = \"https://s.chameleon4switch.cf/\";\nvar name = localStorage.getItem(\"name\");\nvar room = localStorage.getItem(\"roomId\");\nvar color;\nvar isTopicChanged = false;\nvar topic; // TODO: 토픽 바꾸면 여기에서 토픽값 저장하고 있어야 함. 초기값 들어있는지 확인 바람\n\nvar socket = null;\nvar boxes = new Array();\n/* 인식된 메시지 프론트에 기록하는 함수*/\n\nfunction writeMessage(color, name, message) {\n  var box = new Object();\n  box.color = color;\n  box.name = name;\n  box.message = message;\n  boxes.push(box);\n}\n/* socket.io 서버에 유저이름, 인식된 메시지 전송하는 함수 */\n\n\nfunction sender(text) {\n  socket.emit(\"user\", {\n    color: color,\n    name: name,\n    message: text,\n    topic: topic\n  });\n  writeMessage(color, name, text);\n}\n\nexport var TopicDrawerBar = /*#__PURE__*/function (_Component) {\n  _inherits(TopicDrawerBar, _Component);\n\n  function TopicDrawerBar(props) {\n    var _this;\n\n    _classCallCheck(this, TopicDrawerBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TopicDrawerBar).call(this, props));\n\n    _this.componentWillReceiveProps = function () {\n      //props를 전달받으면 현재 선택된 토픽을 초기화한다.\n      console.log(\"현재 토픽:\", _this.props.mainTopics[0]);\n\n      _this.setState({\n        currentTopic: _this.props.mainTopics[0],\n        currentTopicIndex: 0\n      }); //프론트 스타일링 0번째 버튼 선택으로 초기화\n\n\n      var initTopicClicked = [];\n\n      _this.state.isTopicClicked.forEach(function (index) {\n        initTopicClicked.push(false);\n      });\n\n      initTopicClicked[0] = true;\n\n      _this.setState({\n        isTopicClicked: initTopicClicked\n      });\n    };\n\n    _this.onChangeTime = function () {\n      _this.setState({\n        d: new Date()\n      });\n    };\n\n    _this.onTopicChange = function (e) {\n      console.log(\"토픽이름:\", e.target.innerHTML);\n      isTopicChanged = true;\n      topic = e.target.innerHTML; //여기서부터는 토픽 선택 시, 해당 토픽 선택에 대한 스타일링을 입힌 부분.(소여이는 이 아래는 신경쓰지 않아도 됨.)\n\n      var newIsTopicClicked = [];\n\n      _this.state.isTopicClicked.forEach(function (index) {\n        newIsTopicClicked.push(false);\n      });\n\n      newIsTopicClicked[e.target.id] = true;\n\n      _this.setState({\n        isTopicClicked: newIsTopicClicked,\n        currentTopic: e.target.innerHTML,\n        currentTopicIndex: e.target.id\n      });\n    };\n\n    _this.state = {\n      d: new Date(),\n      chatLogs: \"\",\n      startTime: new Date(),\n      isTopicClicked: [],\n      currentTopic: \"\",\n      currentTopicIndex: 0\n    };\n    _this.items = [];\n\n    for (var i = 1; i <= 5; i++) {\n      _this.items.push(i);\n    }\n\n    return _this;\n  }\n\n  _createClass(TopicDrawerBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      /*회의 시작 시간 state에 담아둔다: 회의 종료 시간과 계산하여 회의 총 시간 계산 예정 */\n      this.setState({\n        startTime: new Date()\n      }); // Clockcmp 컴포넌트가 불러올때마다 1초씩 this.Change()를 부른다\n\n      this.timeID = setInterval(function () {\n        return _this2.onChangeTime();\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      //종료되면 반복하는것도 클리어시키기\n      clearInterval(this.timeID); //회의록 기록 종료\n\n      if (isRecognizing) {\n        recognition.stop();\n        return;\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var script = document.createElement(\"script\");\n      script.src = \"http://cdn.socket.io/socket.io-1.4.0.js\";\n      socket = io.connect(serverURL);\n      socket.on(\"connection\", function (data) {\n        if (data.type === \"connected\") {\n          color = data.color;\n          socket.emit(\"connection\", {\n            type: \"join\",\n            name: name,\n            room: room\n          });\n        }\n      });\n      socket.on(\"system\", function (data) {\n        writeMessage(\"#eeeeee\", \"system\", data.message);\n      });\n      socket.on(\"message\", function (data) {\n        writeMessage(data.color, data.name, data.message);\n      });\n\n      if (isTopicChanged) {\n        socket.emit(\"topic\", {\n          topic: this.state.currentTopic,\n          index: this.state.currentTopicIndex\n        });\n        isTopicChanged = false;\n      }\n\n      socket.on(\"changeTopic\", function (data) {\n        if (topic === data.topic) {\n          console.log(\"현재 토픽 주제(\", topic, \")와 같으므로 바꾸지 않음: \", data.topic);\n        } else {\n          console.log(\"토픽 변경 실행\"); // TODO: 윤영 여기에 프론트 토픽 바꾸도록 추가 바람\n\n          this.setState({\n            currentTopic: data.topic,\n            currentTopicIndex: data.index\n          }); //여기서부터는 토픽 선택 시, 해당 토픽 선택에 대한 스타일링을 입힘.\n\n          var newIsTopicClicked = [];\n          this.state.isTopicClicked.forEach(function (index) {\n            newIsTopicClicked.push(false);\n          });\n          newIsTopicClicked[data.index] = true;\n          this.setState({\n            isTopicClicked: newIsTopicClicked\n          });\n        }\n      });\n      /*******************************/\n\n      /** STT 시작하는 함수 */\n\n      /*******************************/\n\n      if (isRecognizing) {\n        alert(\"이미 참여 중입니다.\");\n        return;\n      }\n\n      recognition.lang = language;\n      recognition.start();\n      ignoreEndProcess = false;\n      finalTranscript = \"\";\n      /*******************************/\n    }\n    /***************************************************/\n    //일반 호출 함수\n\n    /***************************************************/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var currentDate = this.state.d.getFullYear() + \".\" + this.state.d.getMonth() + \".\" + this.state.d.getDate() + \".\" + this.state.d.getHours() + \":\" + this.state.d.getMinutes() + \":\" + this.state.d.getSeconds();\n      var _this$props = this.props,\n          startTime = _this$props.startTime,\n          mainTopics = _this$props.mainTopics;\n      return /*#__PURE__*/React.createElement(DrawerContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(DrawerTitleContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 9\n        }\n      }, \"\\uC2E4\\uC2DC\\uAC04 \\uD68C\\uC758\\uB85D\", /*#__PURE__*/React.createElement(RecordTime, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }\n      }, currentDate)), /*#__PURE__*/React.createElement(TopicContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 9\n        }\n      }, Object.keys(mainTopics).map(function (topicId) {\n        var topic = mainTopics[topicId];\n        return /*#__PURE__*/React.createElement(TopicItem, {\n          onClick: _this3.onTopicChange,\n          id: topicId,\n          style: {\n            color: _this3.state.isTopicClicked[topicId] ? \"var(--greenish-teal)\" : \"white\"\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }\n        }, topic);\n      })), /*#__PURE__*/React.createElement(DarkDivideLine, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 9\n        }\n      }), Object.keys(boxes).map(function (id) {\n        var box = boxes[id];\n        return /*#__PURE__*/React.createElement(RecordBorder, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(TimeStamp, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }\n        }, _this3.state.d.getHours(), \":\", _this3.state.d.getMinutes()), /*#__PURE__*/React.createElement(RecordItem, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(RecordItemColor, {\n          style: {\n            color: box.color\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 17\n          }\n        }, box.name, \":\"), box.message));\n      }), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return TopicDrawerBar;\n}(Component);\nexport default TopicDrawerBar;","map":{"version":3,"sources":["C:/Users/o_ov0/Downloads/Front-End-develop/Front-End-develop/client/src/components/independent/webRTCRoom/TopicDrawerBar.jsx"],"names":["React","Component","io","DrawerContainer","DrawerTitleContainer","RecordTime","TopicContainer","TopicItem","DarkDivideLine","RecordItem","RecordItemColor","RecordBorder","TimeStamp","isRecognizing","ignoreEndProcess","finalTranscript","window","SpeechRecognition","webkitSpeechRecognition","recognition","language","continuous","interimResults","onstart","onend","onresult","event","interimTranscript","results","stop","i","resultIndex","length","isFinal","sender","transcript","onerror","console","log","error","match","onExit","serverURL","name","localStorage","getItem","room","color","isTopicChanged","topic","socket","boxes","Array","writeMessage","message","box","Object","push","text","emit","TopicDrawerBar","props","componentWillReceiveProps","mainTopics","setState","currentTopic","currentTopicIndex","initTopicClicked","state","isTopicClicked","forEach","index","onChangeTime","d","Date","onTopicChange","e","target","innerHTML","newIsTopicClicked","id","chatLogs","startTime","items","timeID","setInterval","clearInterval","script","document","createElement","src","connect","on","data","type","alert","lang","start","currentDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","keys","map","topicId"],"mappings":"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","sourcesContent":["/**\n * 담당자:조윤영 Edit By.권소영\n * [OUTLINE]\n * TopicDrawerBar파일은 기존 DrawerBar컴포넌트를 고정하여 STT를 적용한 컴포넌트.\n * <p>\n * [METHOD]\n * recognition.onstart(): STT 인식 시작하는 함수\n * recognition.onend(): stt 인식 종료하는 함수\n * recognition.onresult(): 인식된 결과 처리하는 함수\n * recognition.onerror(): 에러를 처리하는 함수\n * onJoin(): STT 시작하는 함수\n * writeMessage(type, name, message): 인식된 메시지 프론트에 기록하는 함수\n * sender(text): socket.io 서버에 유저이름, 인식된 메시지 전송하는 함수\n *\n *\n * <p>\n * [LIBRARY]\n * 1. io: socket에 연결하기 위한 라이브러리\n */\nimport React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport {\n  DrawerContainer,\n  DrawerTitleContainer,\n  RecordTime,\n  TopicContainer,\n  TopicItem,\n  DarkDivideLine,\n  RecordItem,\n  RecordItemColor,\n  RecordBorder,\n  TimeStamp\n} from \"./webrtc.style\";\n\n//--------------------------------------------------------\n//-----------------Speech Recognition Code----------------\n//--------------------------------------------------------\n\nvar isRecognizing = false;\nvar ignoreEndProcess = false;\nvar finalTranscript = \"\";\n\nwindow.SpeechRecognition =\n  window.webkitSpeechRecognition || window.SpeechRecognition;\n\nvar recognition = new window.webkitSpeechRecognition();\nconst language = \"ko-KR\";\nrecognition.continuous = true; // 음성이 인식될 때마다 결과값 반환\nrecognition.interimResults = true; // 끝나지 않은 상태의 음성 반환 설정\n\n/** STT 인식 시작 함수*/\nrecognition.onstart = function() {\n  isRecognizing = true;\n};\n\n/** STT 인식 종료 함수*/\nrecognition.onend = function() {\n  isRecognizing = false;\n\n  if (ignoreEndProcess) {\n    return false;\n  }\n\n  if (!finalTranscript) {\n    return false;\n  }\n};\n/** 인식된 결과 처리 함수 */\nrecognition.onresult = function(event) {\n  let interimTranscript = \"\";\n\n  if (typeof event.results === \"undefined\") {\n    recognition.onend = null;\n    recognition.stop();\n    return;\n  }\n\n  for (let i = event.resultIndex; i < event.results.length; ++i) {\n    if (event.results[i].isFinal) {\n      // 인식된 문장이 끝났을 경우\n      sender(event.results[i][0].transcript);\n    } else {\n      interimTranscript += event.results[i][0].transcript;\n    }\n  }\n};\n/** 에러 처리 함수 */\nrecognition.onerror = function(event) {\n  console.log(\"onerror\", event);\n\n  if (event.error.match(/no-speech|audio-capture|not-allowed/)) {\n    ignoreEndProcess = true;\n  }\n};\n\n/** STT 종료하는 함수 */\nconst onExit = () => {\n  if (isRecognizing) {\n    recognition.stop();\n    return;\n  }\n};\n\n//--------------------------------------------------------\n//-----------------Send to socket.io Server---------------\n//--------------------------------------------------------\n\nvar serverURL = \"https://s.chameleon4switch.cf/\";\nvar name = localStorage.getItem(\"name\");\nvar room = localStorage.getItem(\"roomId\");\nvar color;\nvar isTopicChanged = false;\nvar topic; // TODO: 토픽 바꾸면 여기에서 토픽값 저장하고 있어야 함. 초기값 들어있는지 확인 바람\n\nvar socket = null;\n\nvar boxes = new Array();\n\n/* 인식된 메시지 프론트에 기록하는 함수*/\nfunction writeMessage(color, name, message) {\n  var box = new Object();\n\n  box.color = color;\n  box.name = name;\n  box.message = message;\n\n  boxes.push(box);\n}\n\n/* socket.io 서버에 유저이름, 인식된 메시지 전송하는 함수 */\nfunction sender(text) {\n  socket.emit(\"user\", {\n    color: color,\n    name: name,\n    message: text,\n    topic: topic\n  });\n  writeMessage(color, name, text);\n}\n\nexport class TopicDrawerBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      d: new Date(),\n      chatLogs: \"\",\n      startTime: new Date(),\n      isTopicClicked: [],\n      currentTopic: \"\",\n      currentTopicIndex: 0\n    };\n    this.items = [];\n    for (let i = 1; i <= 5; i++) {\n      this.items.push(i);\n    }\n  }\n  componentDidMount() {\n    /*회의 시작 시간 state에 담아둔다: 회의 종료 시간과 계산하여 회의 총 시간 계산 예정 */\n    this.setState({\n      startTime: new Date()\n    });\n\n    // Clockcmp 컴포넌트가 불러올때마다 1초씩 this.Change()를 부른다\n    this.timeID = setInterval(() => this.onChangeTime(), 1000);\n  }\n\n  componentWillUnmount() {\n    //종료되면 반복하는것도 클리어시키기\n    clearInterval(this.timeID);\n\n    //회의록 기록 종료\n    if (isRecognizing) {\n      recognition.stop();\n      return;\n    }\n  }\n\n  componentWillReceiveProps = () => {\n    //props를 전달받으면 현재 선택된 토픽을 초기화한다.\n    console.log(\"현재 토픽:\", this.props.mainTopics[0]);\n\n    this.setState({\n      currentTopic: this.props.mainTopics[0],\n      currentTopicIndex: 0\n    });\n\n    //프론트 스타일링 0번째 버튼 선택으로 초기화\n    const initTopicClicked = [];\n    this.state.isTopicClicked.forEach(index => {\n      initTopicClicked.push(false);\n    });\n    initTopicClicked[0] = true;\n\n    this.setState({ isTopicClicked: initTopicClicked });\n  };\n\n  componentWillMount() {\n    const script = document.createElement(\"script\");\n\n    script.src = \"http://cdn.socket.io/socket.io-1.4.0.js\";\n\n    socket = io.connect(serverURL);\n\n    socket.on(\"connection\", function(data) {\n      if (data.type === \"connected\") {\n        color = data.color;\n\n        socket.emit(\"connection\", {\n          type: \"join\",\n          name: name,\n          room: room\n        });\n      }\n    });\n\n    socket.on(\"system\", function(data) {\n      writeMessage(\"#eeeeee\", \"system\", data.message);\n    });\n\n    socket.on(\"message\", function(data) {\n      writeMessage(data.color, data.name, data.message);\n    });\n\n    if (isTopicChanged) {\n      socket.emit(\"topic\", {\n        topic: this.state.currentTopic,\n        index: this.state.currentTopicIndex\n      });\n\n      isTopicChanged = false;\n    }\n\n    socket.on(\"changeTopic\", function(data) {\n      if (topic === data.topic) {\n        console.log(\n          \"현재 토픽 주제(\",\n          topic,\n          \")와 같으므로 바꾸지 않음: \",\n          data.topic\n        );\n      } else {\n        console.log(\"토픽 변경 실행\");\n        // TODO: 윤영 여기에 프론트 토픽 바꾸도록 추가 바람\n        this.setState({\n          currentTopic: data.topic,\n          currentTopicIndex: data.index\n        });\n\n        //여기서부터는 토픽 선택 시, 해당 토픽 선택에 대한 스타일링을 입힘.\n        const newIsTopicClicked = [];\n        this.state.isTopicClicked.forEach(index => {\n          newIsTopicClicked.push(false);\n        });\n        newIsTopicClicked[data.index] = true;\n\n        this.setState({ isTopicClicked: newIsTopicClicked });\n      }\n    });\n\n    /*******************************/\n    /** STT 시작하는 함수 */\n    /*******************************/\n    if (isRecognizing) {\n      alert(\"이미 참여 중입니다.\");\n      return;\n    }\n\n    recognition.lang = language;\n    recognition.start();\n    ignoreEndProcess = false;\n\n    finalTranscript = \"\";\n    /*******************************/\n  }\n\n  /***************************************************/\n  //일반 호출 함수\n  /***************************************************/\n  onChangeTime = () => {\n    this.setState({\n      d: new Date()\n    });\n  };\n\n  onTopicChange = e => {\n    console.log(\"토픽이름:\", e.target.innerHTML);\n    isTopicChanged = true;\n    topic = e.target.innerHTML;\n\n    //여기서부터는 토픽 선택 시, 해당 토픽 선택에 대한 스타일링을 입힌 부분.(소여이는 이 아래는 신경쓰지 않아도 됨.)\n    const newIsTopicClicked = [];\n    this.state.isTopicClicked.forEach(index => {\n      newIsTopicClicked.push(false);\n    });\n    newIsTopicClicked[e.target.id] = true;\n\n    this.setState({\n      isTopicClicked: newIsTopicClicked,\n      currentTopic: e.target.innerHTML,\n      currentTopicIndex: e.target.id\n    });\n  };\n\n  render() {\n    var currentDate =\n      this.state.d.getFullYear() +\n      \".\" +\n      this.state.d.getMonth() +\n      \".\" +\n      this.state.d.getDate() +\n      \".\" +\n      this.state.d.getHours() +\n      \":\" +\n      this.state.d.getMinutes() +\n      \":\" +\n      this.state.d.getSeconds();\n\n    const { startTime, mainTopics } = this.props;\n    return (\n      <DrawerContainer>\n        <DrawerTitleContainer>\n          실시간 회의록\n          <RecordTime>{currentDate}</RecordTime>\n        </DrawerTitleContainer>\n        <TopicContainer>\n          {/* Topic GET API 받아와서 map으로 for문 돌릴 부분 */}\n          {Object.keys(mainTopics).map(topicId => {\n            const topic = mainTopics[topicId];\n            return (\n              <TopicItem\n                onClick={this.onTopicChange}\n                id={topicId}\n                style={{\n                  color: this.state.isTopicClicked[topicId]\n                    ? \"var(--greenish-teal)\"\n                    : \"white\"\n                }}\n              >\n                {topic}\n              </TopicItem>\n            );\n          })}\n        </TopicContainer>\n\n        <DarkDivideLine />\n        {/* RecordBox: 정적이 길게 흐르기 전까지를 기준으로 기록을 보여주는 RecordBox,즉 소영이 너가 쌓아내려갈 DIV */}\n        {Object.keys(boxes).map(id => {\n          const box = boxes[id];\n\n          return (\n            <RecordBorder>\n              <TimeStamp>\n                {this.state.d.getHours()}:{this.state.d.getMinutes()}\n              </TimeStamp>\n              <RecordItem>\n                <RecordItemColor\n                  style={{\n                    color: box.color\n                  }}\n                >\n                  {box.name}:\n                </RecordItemColor>\n                {box.message}\n              </RecordItem>\n            </RecordBorder>\n          );\n        })}\n\n        <section className=\"center\"></section>\n      </DrawerContainer>\n    );\n  }\n}\n\nexport default TopicDrawerBar;\n"]},"metadata":{},"sourceType":"module"}