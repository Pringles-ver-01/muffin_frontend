{"ast":null,"code":"/**\n * Returns the object type of the given payload\n *\n * @param {*} payload\n * @returns {string}\n */\nfunction getType(payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1);\n}\n/**\n * Returns whether the payload is undefined\n *\n * @param {*} payload\n * @returns {payload is undefined}\n */\n\n\nfunction isUndefined(payload) {\n  return getType(payload) === 'Undefined';\n}\n/**\n * Returns whether the payload is null\n *\n * @param {*} payload\n * @returns {payload is null}\n */\n\n\nfunction isNull(payload) {\n  return getType(payload) === 'Null';\n}\n/**\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is {[key: string]: any}}\n */\n\n\nfunction isPlainObject(payload) {\n  if (getType(payload) !== 'Object') return false;\n  return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\n}\n/**\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is {[key: string]: any}}\n */\n\n\nfunction isObject(payload) {\n  return isPlainObject(payload);\n}\n/**\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is {}}\n */\n\n\nfunction isEmptyObject(payload) {\n  return isPlainObject(payload) && Object.keys(payload).length === 0;\n}\n/**\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\n *\n * @param {*} payload\n * @returns {payload is {[key: string]: any}}\n */\n\n\nfunction isAnyObject(payload) {\n  return getType(payload) === 'Object';\n}\n/**\n * Returns whether the payload is an object like a type passed in < >\n *\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\n *\n * @template T this must be passed in < >\n * @param {*} payload\n * @returns {payload is T}\n */\n\n\nfunction isObjectLike(payload) {\n  return isAnyObject(payload);\n}\n/**\n * Returns whether the payload is a function\n *\n * @param {*} payload\n * @returns {payload is Function}\n */\n\n\nfunction isFunction(payload) {\n  return getType(payload) === 'Function';\n}\n/**\n * Returns whether the payload is an array\n *\n * @param {*} payload\n * @returns {payload is undefined}\n */\n\n\nfunction isArray(payload) {\n  return getType(payload) === 'Array';\n}\n/**\n * Returns whether the payload is a an empty array\n *\n * @param {*} payload\n * @returns {payload is []}\n */\n\n\nfunction isEmptyArray(payload) {\n  return isArray(payload) && payload.length === 0;\n}\n/**\n * Returns whether the payload is a string\n *\n * @param {*} payload\n * @returns {payload is string}\n */\n\n\nfunction isString(payload) {\n  return getType(payload) === 'String';\n}\n/**\n * Returns whether the payload is a string, BUT returns false for ''\n *\n * @param {*} payload\n * @returns {payload is string}\n */\n\n\nfunction isFullString(payload) {\n  return isString(payload) && payload !== '';\n}\n/**\n * Returns whether the payload is ''\n *\n * @param {*} payload\n * @returns {payload is string}\n */\n\n\nfunction isEmptyString(payload) {\n  return payload === '';\n}\n/**\n * Returns whether the payload is a number\n *\n * This will return false for NaN\n *\n * @param {*} payload\n * @returns {payload is number}\n */\n\n\nfunction isNumber(payload) {\n  return getType(payload) === 'Number' && !isNaN(payload);\n}\n/**\n * Returns whether the payload is a boolean\n *\n * @param {*} payload\n * @returns {payload is boolean}\n */\n\n\nfunction isBoolean(payload) {\n  return getType(payload) === 'Boolean';\n}\n/**\n * Returns whether the payload is a regular expression (RegExp)\n *\n * @param {*} payload\n * @returns {payload is RegExp}\n */\n\n\nfunction isRegExp(payload) {\n  return getType(payload) === 'RegExp';\n}\n/**\n * Returns whether the payload is a Map\n *\n * @param {*} payload\n * @returns {payload is Map}\n */\n\n\nfunction isMap(payload) {\n  return getType(payload) === 'Map';\n}\n/**\n * Returns whether the payload is a WeakMap\n *\n * @param {*} payload\n * @returns {payload is WeakMap}\n */\n\n\nfunction isWeakMap(payload) {\n  return getType(payload) === 'WeakMap';\n}\n/**\n * Returns whether the payload is a Set\n *\n * @param {*} payload\n * @returns {payload is Set}\n */\n\n\nfunction isSet(payload) {\n  return getType(payload) === 'Set';\n}\n/**\n * Returns whether the payload is a WeakSet\n *\n * @param {*} payload\n * @returns {payload is WeakSet}\n */\n\n\nfunction isWeakSet(payload) {\n  return getType(payload) === 'WeakSet';\n}\n/**\n * Returns whether the payload is a Symbol\n *\n * @param {*} payload\n * @returns {payload is symbol}\n */\n\n\nfunction isSymbol(payload) {\n  return getType(payload) === 'Symbol';\n}\n/**\n * Returns whether the payload is a Date, and that the date is valid\n *\n * @param {*} payload\n * @returns {payload is Date}\n */\n\n\nfunction isDate(payload) {\n  return getType(payload) === 'Date' && !isNaN(payload);\n}\n/**\n * Returns whether the payload is a Blob\n *\n * @param {*} payload\n * @returns {payload is Blob}\n */\n\n\nfunction isBlob(payload) {\n  return getType(payload) === 'Blob';\n}\n/**\n * Returns whether the payload is a File\n *\n * @param {*} payload\n * @returns {payload is File}\n */\n\n\nfunction isFile(payload) {\n  return getType(payload) === 'File';\n}\n/**\n * Returns whether the payload is a Promise\n *\n * @param {*} payload\n * @returns {payload is Promise}\n */\n\n\nfunction isPromise(payload) {\n  return getType(payload) === 'Promise';\n}\n/**\n * Returns whether the payload is an Error\n *\n * @param {*} payload\n * @returns {payload is Error}\n */\n\n\nfunction isError(payload) {\n  return getType(payload) === 'Error';\n}\n/**\n * Returns whether the payload is `NaN` but also a `number`\n *\n * @param {*} payload\n * @returns {payload is typeof NaN}\n */\n\n\nfunction isNaNValue(payload) {\n  return getType(payload) === 'Number' && isNaN(payload);\n}\n/**\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\n *\n * @param {*} payload\n * @returns {(payload is boolean | null | undefined | number | string | symbol)}\n */\n\n\nfunction isPrimitive(payload) {\n  return isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);\n}\n/**\n * Returns true whether the payload is null or undefined\n *\n * @param {*} payload\n * @returns {(payload is null | undefined)}\n */\n\n\nfunction isNullOrUndefined(payload) {\n  return isNull(payload) || isUndefined(payload);\n}\n/**\n * Does a generic check to check that the given payload is of a given type.\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\n * It will, however, differentiate between object and null\n *\n * @template T\n * @param {*} payload\n * @param {T} type\n * @throws {TypeError} Will throw type error if type is an invalid type\n * @returns {payload is T}\n */\n\n\nfunction isType(payload, type) {\n  if (!(type instanceof Function)) {\n    throw new TypeError('Type must be a function');\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(type, 'prototype')) {\n    throw new TypeError('Type is not a class');\n  } // Classes usually have names (as functions usually have names)\n\n\n  var name = type.name;\n  return getType(payload) === name || Boolean(payload && payload.constructor === type);\n}\n\nexport { getType, isAnyObject, isArray, isBlob, isBoolean, isDate, isEmptyArray, isEmptyObject, isEmptyString, isError, isFile, isFullString, isFunction, isMap, isNaNValue, isNull, isNullOrUndefined, isNumber, isObject, isObjectLike, isPlainObject, isPrimitive, isPromise, isRegExp, isSet, isString, isSymbol, isType, isUndefined, isWeakMap, isWeakSet };","map":null,"metadata":{},"sourceType":"module"}